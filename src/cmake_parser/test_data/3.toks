<UnquotedArgument b'include'>
<Bra b'('>
<UnquotedArgument b'LLVMProcessSources'>
<Ket b')'>
<UnquotedArgument b'include'>
<Bra b'('>
<UnquotedArgument b'LLVM-Config'>
<Ket b')'>
<UnquotedArgument b'include'>
<Bra b'('>
<UnquotedArgument b'DetermineGCCCompatible'>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'llvm_update_compile_flags'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'get_property'>
<Bra b'('>
<UnquotedArgument b'sources'>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'SOURCES'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<QuotedArgument b'"${sources}"'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"\\\\.c(;|$)"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'update_src_props'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# LLVM_REQUIRES_EH is an internal flag that individual targets can use to'>
<Comment b'# force EH'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_REQUIRES_EH'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'LLVM_ENABLE_EH'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<Bra b'('>
<UnquotedArgument b'LLVM_REQUIRES_RTTI'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'LLVM_ENABLE_RTTI'>
<Ket b')'>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'AUTHOR_WARNING'>
<QuotedArgument b'"Exception handling requires RTTI. Enabling RTTI for ${name}"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_REQUIRES_RTTI'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'MSVC'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMPILE_FLAGS'>
<QuotedArgument b'"/EHsc"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_COMPILER_IS_GCC_COMPATIBLE'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMPILE_FLAGS'>
<QuotedArgument b'"-fno-exceptions"'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'MSVC'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMPILE_DEFINITIONS'>
<UnquotedArgument b'_HAS_EXCEPTIONS=0'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMPILE_FLAGS'>
<QuotedArgument b'"/EHs-c-"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# LLVM_REQUIRES_RTTI is an internal flag that individual'>
<Comment b'# targets can use to force RTTI'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_CONFIG_HAS_RTTI'>
<UnquotedArgument b'YES'>
<UnquotedArgument b'CACHE'>
<UnquotedArgument b'INTERNAL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<Bra b'('>
<UnquotedArgument b'LLVM_REQUIRES_RTTI'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'LLVM_ENABLE_RTTI'>
<Ket b')'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_CONFIG_HAS_RTTI'>
<UnquotedArgument b'NO'>
<UnquotedArgument b'CACHE'>
<UnquotedArgument b'INTERNAL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMPILE_DEFINITIONS'>
<UnquotedArgument b'GTEST_HAS_RTTI=0'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_COMPILER_IS_GCC_COMPATIBLE'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMPILE_FLAGS'>
<QuotedArgument b'"-fno-rtti"'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'MSVC'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMPILE_FLAGS'>
<QuotedArgument b'"/GR-"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'MSVC'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMPILE_FLAGS'>
<QuotedArgument b'"/GR"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# Assume that;'>
<Comment b'#   - LLVM_COMPILE_FLAGS is list.'>
<Comment b'#   - PROPERTY COMPILE_FLAGS is string.'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<QuotedArgument b'";"'>
<QuotedArgument b'" "'>
<UnquotedArgument b'target_compile_flags'>
<QuotedArgument b'" ${LLVM_COMPILE_FLAGS}"'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'update_src_props'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'fn'>
<UnquotedArgument b'${sources}'>
<Ket b')'>
<UnquotedArgument b'get_filename_component'>
<Bra b'('>
<UnquotedArgument b'suf'>
<UnquotedArgument b'${fn}'>
<UnquotedArgument b'EXT'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<QuotedArgument b'"${suf}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'".cpp"'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'SOURCE'>
<UnquotedArgument b'${fn}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'COMPILE_FLAGS'>
<QuotedArgument b'"${target_compile_flags}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<Comment b'# Update target props, since all sources are C++.'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'COMPILE_FLAGS'>
<QuotedArgument b'"${target_compile_flags}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'COMPILE_DEFINITIONS'>
<UnquotedArgument b'${LLVM_COMPILE_DEFINITIONS}'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'add_llvm_symbol_exports'>
<UnquotedArgument b'target_name'>
<UnquotedArgument b'export_file'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${CMAKE_SYSTEM_NAME}'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"Darwin"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'native_export_file'>
<QuotedArgument b'"${target_name}.exports"'>
<Ket b')'>
<UnquotedArgument b'add_custom_command'>
<Bra b'('>
<UnquotedArgument b'OUTPUT'>
<UnquotedArgument b'${native_export_file}'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'sed'>
<UnquotedArgument b'-e'>
<QuotedArgument b'"s/^/_/"'>
<UnquotedArgument b'<'>
<UnquotedArgument b'${export_file}'>
<UnquotedArgument b'>'>
<UnquotedArgument b'${native_export_file}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${export_file}'>
<UnquotedArgument b'VERBATIM'>
<UnquotedArgument b'COMMENT'>
<QuotedArgument b'"Creating export file for ${target_name}"'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'" -Wl,-exported_symbols_list,${CMAKE_CURRENT_BINARY_DIR}/${native_export_file}"'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'${CMAKE_SYSTEM_NAME}'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"AIX"'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'" -Wl,-bE:${export_file}"'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'LLVM_HAVE_LINK_VERSION_SCRIPT'>
<Ket b')'>
<Comment b'# Gold and BFD ld require a version script rather than a plain list.'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'native_export_file'>
<QuotedArgument b'"${target_name}.exports"'>
<Ket b')'>
<Comment b'# FIXME: Don\'t write the "local:" line on OpenBSD.'>
<Comment b'# in the export file, also add a linker script to version LLVM symbols (form: LLVM_N.M)'>
<UnquotedArgument b'add_custom_command'>
<Bra b'('>
<UnquotedArgument b'OUTPUT'>
<UnquotedArgument b'${native_export_file}'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'echo'>
<QuotedArgument b'"LLVM_${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR} {"'>
<UnquotedArgument b'>'>
<UnquotedArgument b'${native_export_file}'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'grep'>
<UnquotedArgument b'-q'>
<QuotedArgument b'"[[:alnum:]]"'>
<UnquotedArgument b'${export_file}'>
<UnquotedArgument b'&&'>
<UnquotedArgument b'echo'>
<QuotedArgument b'"  global:"'>
<UnquotedArgument b'>>'>
<UnquotedArgument b'${native_export_file}'>
<UnquotedArgument b'||'>
<UnquotedArgument b':'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'sed'>
<UnquotedArgument b'-e'>
<QuotedArgument b'"s/$/;/"'>
<UnquotedArgument b'-e'>
<QuotedArgument b'"s/^/    /"'>
<UnquotedArgument b'<'>
<UnquotedArgument b'${export_file}'>
<UnquotedArgument b'>>'>
<UnquotedArgument b'${native_export_file}'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'echo'>
<QuotedArgument b'"  local: *;"'>
<UnquotedArgument b'>>'>
<UnquotedArgument b'${native_export_file}'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'echo'>
<QuotedArgument b'"};"'>
<UnquotedArgument b'>>'>
<UnquotedArgument b'${native_export_file}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${export_file}'>
<UnquotedArgument b'VERBATIM'>
<UnquotedArgument b'COMMENT'>
<QuotedArgument b'"Creating export file for ${target_name}"'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${LLVM_LINKER_IS_SOLARISLD}'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'"  -Wl,-M,${CMAKE_CURRENT_BINARY_DIR}/${native_export_file}"'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'"  -Wl,--version-script,${CMAKE_CURRENT_BINARY_DIR}/${native_export_file}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'native_export_file'>
<QuotedArgument b'"${target_name}.def"'>
<Ket b')'>
<UnquotedArgument b'add_custom_command'>
<Bra b'('>
<UnquotedArgument b'OUTPUT'>
<UnquotedArgument b'${native_export_file}'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'${PYTHON_EXECUTABLE}'>
<UnquotedArgument b'-c'>
<QuotedArgument b'"import sys;print(\'\'.join([\'EXPORTS\\\\n\']+sys.stdin.readlines(),))"'>
<UnquotedArgument b'<'>
<UnquotedArgument b'${export_file}'>
<UnquotedArgument b'>'>
<UnquotedArgument b'${native_export_file}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${export_file}'>
<UnquotedArgument b'VERBATIM'>
<UnquotedArgument b'COMMENT'>
<QuotedArgument b'"Creating export file for ${target_name}"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'export_file_linker_flag'>
<QuotedArgument b'"${CMAKE_CURRENT_BINARY_DIR}/${native_export_file}"'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'MSVC'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'export_file_linker_flag'>
<QuotedArgument b'"/DEF:\\"${export_file_linker_flag}\\""'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'" ${export_file_linker_flag}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_custom_target'>
<Bra b'('>
<UnquotedArgument b'${target_name}_exports'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${native_export_file}'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target_name}_exports'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'FOLDER'>
<QuotedArgument b'"Misc"'>
<Ket b')'>
<UnquotedArgument b'get_property'>
<Bra b'('>
<UnquotedArgument b'srcs'>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'SOURCES'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'src'>
<UnquotedArgument b'${srcs}'>
<Ket b')'>
<UnquotedArgument b'get_filename_component'>
<Bra b'('>
<UnquotedArgument b'extension'>
<UnquotedArgument b'${src}'>
<UnquotedArgument b'EXT'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'extension'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'".cpp"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'first_source_file'>
<UnquotedArgument b'${src}'>
<Ket b')'>
<UnquotedArgument b'break'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<Comment b'# Force re-linking when the exports file changes. Actually, it'>
<Comment b'# forces recompilation of the source file. The LINK_DEPENDS target'>
<Comment b'# property only works for makefile-based generators.'>
<Comment b'# FIXME: This is not safe because this will create the same target'>
<Comment b'# ${native_export_file} in several different file:'>
<Comment b'# - One where we emitted ${target_name}_exports'>
<Comment b'# - One where we emitted the build command for the following object.'>
<Comment b'# set_property(SOURCE ${first_source_file} APPEND PROPERTY'>
<Comment b'#   OBJECT_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${native_export_file})'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'DIRECTORY'>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'ADDITIONAL_MAKE_CLEAN_FILES'>
<UnquotedArgument b'${native_export_file}'>
<Ket b')'>
<UnquotedArgument b'add_dependencies'>
<Bra b'('>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'${target_name}_exports'>
<Ket b')'>
<Comment b'# Add dependency to *_exports later -- CMake issue 14747'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMMON_DEPENDS'>
<UnquotedArgument b'${target_name}_exports'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_COMMON_DEPENDS'>
<UnquotedArgument b'${LLVM_COMMON_DEPENDS}'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<UnquotedArgument b'add_llvm_symbol_exports'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'WIN32'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'APPLE'>
<Ket b')'>
<Comment b'# Detect what linker we have here'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_USE_LINKER'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'command'>
<UnquotedArgument b'${CMAKE_C_COMPILER}'>
<UnquotedArgument b'-fuse-ld=${LLVM_USE_LINKER}'>
<UnquotedArgument b'-Wl,--version'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'command'>
<UnquotedArgument b'${CMAKE_C_COMPILER}'>
<UnquotedArgument b'-Wl,--version'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'execute_process'>
<Bra b'('>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'${command}'>
<UnquotedArgument b'OUTPUT_VARIABLE'>
<UnquotedArgument b'stdout'>
<UnquotedArgument b'ERROR_VARIABLE'>
<UnquotedArgument b'stderr'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_LINKER_DETECTED'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<QuotedArgument b'"${stdout}"'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"GNU gold"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_LINKER_IS_GOLD'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'STATUS'>
<QuotedArgument b'"Linker detection: GNU Gold"'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<QuotedArgument b'"${stdout}"'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"^LLD"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_LINKER_IS_LLD'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'STATUS'>
<QuotedArgument b'"Linker detection: LLD"'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<QuotedArgument b'"${stdout}"'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"GNU ld"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_LINKER_IS_GNULD'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'STATUS'>
<QuotedArgument b'"Linker detection: GNU ld"'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<QuotedArgument b'"${stderr}"'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"Solaris Link Editors"'>
<UnquotedArgument b'OR'>
<QuotedArgument b'"${stdout}"'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"Solaris Link Editors"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_LINKER_IS_SOLARISLD'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'STATUS'>
<QuotedArgument b'"Linker detection: Solaris ld"'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_LINKER_DETECTED'>
<UnquotedArgument b'OFF'>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'STATUS'>
<QuotedArgument b'"Linker detection: unknown"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'add_link_opts'>
<UnquotedArgument b'target_name'>
<Ket b')'>
<Comment b"# Don't use linker optimizations in debug builds since it slows down the">
<Comment b'# linker in a context where the optimizations are not important.'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'uppercase_CMAKE_BUILD_TYPE'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"DEBUG"'>
<Ket b')'>
<Comment b'# Pass -O3 to the linker. This enabled different optimizations on different'>
<Comment b'# linkers.'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<Bra b'('>
<UnquotedArgument b'${CMAKE_SYSTEM_NAME}'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"Darwin|SunOS|AIX"'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'WIN32'>
<Ket b')'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'" -Wl,-O3"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_LINKER_IS_GOLD'>
<Ket b')'>
<Comment b'# With gold gc-sections is always safe.'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'" -Wl,--gc-sections"'>
<Ket b')'>
<Comment b'# Note that there is a bug with -Wl,--icf=safe so it is not safe'>
<Comment b'# to enable. See https://sourceware.org/bugzilla/show_bug.cgi?id=17704.'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_NO_DEAD_STRIP'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${CMAKE_SYSTEM_NAME}'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"Darwin"'>
<Ket b')'>
<Comment b"# ld64's implementation of -dead_strip breaks tools that use plugins.">
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'" -Wl,-dead_strip"'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'${CMAKE_SYSTEM_NAME}'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"SunOS"'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'" -Wl,-z -Wl,discard-unused=sections"'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'WIN32'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_LINKER_IS_GOLD'>
<Ket b')'>
<Comment b'# Object files are compiled with -ffunction-data-sections.'>
<Comment b'# Versions of bfd ld < 2.23.1 have a bug in --gc-sections that breaks'>
<Comment b'# tools that use plugins. Always pass --gc-sections once we require'>
<Comment b'# a newer linker.'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'" -Wl,--gc-sections"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<UnquotedArgument b'add_link_opts'>
<Ket b')'>
<Comment b'# Set each output directory according to ${CMAKE_CONFIGURATION_TYPES}.'>
<Comment b"# Note: Don't set variables CMAKE_*_OUTPUT_DIRECTORY any more,">
<Comment b'# or a certain builder, for eaxample, msbuild.exe, would be confused.'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'set_output_directory'>
<UnquotedArgument b'target'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'""'>
<QuotedArgument b'"BINARY_DIR;LIBRARY_DIR"'>
<QuotedArgument b'""'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<Comment b'# module_dir -- corresponding to LIBRARY_OUTPUT_DIRECTORY.'>
<Comment b'# It affects output of add_library(MODULE).'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'WIN32'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'CYGWIN'>
<Ket b')'>
<Comment b'# DLL platform'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'module_dir'>
<UnquotedArgument b'${ARG_BINARY_DIR}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'module_dir'>
<UnquotedArgument b'${ARG_LIBRARY_DIR}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<QuotedArgument b'"${CMAKE_CFG_INTDIR}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"."'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'build_mode'>
<UnquotedArgument b'${CMAKE_CONFIGURATION_TYPES}'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'TOUPPER'>
<QuotedArgument b'"${build_mode}"'>
<UnquotedArgument b'CONFIG_SUFFIX'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_BINARY_DIR'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<UnquotedArgument b'${CMAKE_CFG_INTDIR}'>
<UnquotedArgument b'${build_mode}'>
<UnquotedArgument b'bi'>
<UnquotedArgument b'${ARG_BINARY_DIR}'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'PROPERTIES'>
<QuotedArgument b'"RUNTIME_OUTPUT_DIRECTORY_${CONFIG_SUFFIX}"'>
<UnquotedArgument b'${bi}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_LIBRARY_DIR'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<UnquotedArgument b'${CMAKE_CFG_INTDIR}'>
<UnquotedArgument b'${build_mode}'>
<UnquotedArgument b'li'>
<UnquotedArgument b'${ARG_LIBRARY_DIR}'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'PROPERTIES'>
<QuotedArgument b'"ARCHIVE_OUTPUT_DIRECTORY_${CONFIG_SUFFIX}"'>
<UnquotedArgument b'${li}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'module_dir'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<UnquotedArgument b'${CMAKE_CFG_INTDIR}'>
<UnquotedArgument b'${build_mode}'>
<UnquotedArgument b'mi'>
<UnquotedArgument b'${module_dir}'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'PROPERTIES'>
<QuotedArgument b'"LIBRARY_OUTPUT_DIRECTORY_${CONFIG_SUFFIX}"'>
<UnquotedArgument b'${mi}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_BINARY_DIR'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'RUNTIME_OUTPUT_DIRECTORY'>
<UnquotedArgument b'${ARG_BINARY_DIR}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_LIBRARY_DIR'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'ARCHIVE_OUTPUT_DIRECTORY'>
<UnquotedArgument b'${ARG_LIBRARY_DIR}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'module_dir'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'LIBRARY_OUTPUT_DIRECTORY'>
<UnquotedArgument b'${module_dir}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<Comment b'# If on Windows and building with MSVC, add the resource script containing the'>
<Comment b'# VERSIONINFO data to the project.  This embeds version resource information'>
<Comment b'# into the output .exe or .dll.'>
<Comment b'# TODO: Enable for MinGW Windows builds too.'>
<Comment b'#'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'add_windows_version_resource_file'>
<UnquotedArgument b'OUT_VAR'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'sources'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'MSVC'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'CMAKE_HOST_SYSTEM_NAME'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"Windows"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'resource_file'>
<UnquotedArgument b'${LLVM_SOURCE_DIR}/resources/windows_version_resource.rc'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'EXISTS'>
<UnquotedArgument b'${resource_file}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'sources'>
<UnquotedArgument b'${sources}'>
<UnquotedArgument b'${resource_file}'>
<Ket b')'>
<UnquotedArgument b'source_group'>
<Bra b'('>
<QuotedArgument b'"Resource Files"'>
<UnquotedArgument b'${resource_file}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'windows_resource_file'>
<UnquotedArgument b'${resource_file}'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<UnquotedArgument b'MSVC'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'CMAKE_HOST_SYSTEM_NAME'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"Windows"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${OUT_VAR}'>
<UnquotedArgument b'${sources}'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<UnquotedArgument b'add_windows_version_resource_file'>
<Ket b')'>
<Comment b'# set_windows_version_resource_properties(name resource_file...'>
<Comment b'#   VERSION_MAJOR int'>
<Comment b'#     Optional major version number (defaults to LLVM_VERSION_MAJOR)'>
<Comment b'#   VERSION_MINOR int'>
<Comment b'#     Optional minor version number (defaults to LLVM_VERSION_MINOR)'>
<Comment b'#   VERSION_PATCHLEVEL int'>
<Comment b'#     Optional patchlevel version number (defaults to LLVM_VERSION_PATCH)'>
<Comment b'#   VERSION_STRING'>
<Comment b'#     Optional version string (defaults to PACKAGE_VERSION)'>
<Comment b'#   PRODUCT_NAME'>
<Comment b'#     Optional product name string (defaults to "LLVM")'>
<Comment b'#   )'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'set_windows_version_resource_properties'>
<UnquotedArgument b'name'>
<UnquotedArgument b'resource_file'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'""'>
<QuotedArgument b'"VERSION_MAJOR;VERSION_MINOR;VERSION_PATCHLEVEL;VERSION_STRING;PRODUCT_NAME"'>
<QuotedArgument b'""'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'DEFINED'>
<UnquotedArgument b'ARG_VERSION_MAJOR'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ARG_VERSION_MAJOR'>
<UnquotedArgument b'${LLVM_VERSION_MAJOR}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'DEFINED'>
<UnquotedArgument b'ARG_VERSION_MINOR'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ARG_VERSION_MINOR'>
<UnquotedArgument b'${LLVM_VERSION_MINOR}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'DEFINED'>
<UnquotedArgument b'ARG_VERSION_PATCHLEVEL'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ARG_VERSION_PATCHLEVEL'>
<UnquotedArgument b'${LLVM_VERSION_PATCH}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'DEFINED'>
<UnquotedArgument b'ARG_VERSION_STRING'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ARG_VERSION_STRING'>
<UnquotedArgument b'${PACKAGE_VERSION}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'DEFINED'>
<UnquotedArgument b'ARG_PRODUCT_NAME'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ARG_PRODUCT_NAME'>
<QuotedArgument b'"LLVM"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'SOURCE'>
<UnquotedArgument b'${resource_file}'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'COMPILE_FLAGS'>
<UnquotedArgument b'/nologo'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'SOURCE'>
<UnquotedArgument b'${resource_file}'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'COMPILE_DEFINITIONS'>
<QuotedArgument b'"RC_VERSION_FIELD_1=${ARG_VERSION_MAJOR}"'>
<QuotedArgument b'"RC_VERSION_FIELD_2=${ARG_VERSION_MINOR}"'>
<QuotedArgument b'"RC_VERSION_FIELD_3=${ARG_VERSION_PATCHLEVEL}"'>
<QuotedArgument b'"RC_VERSION_FIELD_4=0"'>
<QuotedArgument b'"RC_FILE_VERSION=\\"${ARG_VERSION_STRING}\\""'>
<QuotedArgument b'"RC_INTERNAL_NAME=\\"${name}\\""'>
<QuotedArgument b'"RC_PRODUCT_NAME=\\"${ARG_PRODUCT_NAME}\\""'>
<QuotedArgument b'"RC_PRODUCT_VERSION=\\"${ARG_VERSION_STRING}\\""'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<UnquotedArgument b'set_windows_version_resource_properties'>
<Ket b')'>
<Comment b'# llvm_add_library(name sources...'>
<Comment b'#   SHARED;STATIC'>
<Comment b'#     STATIC by default w/o BUILD_SHARED_LIBS.'>
<Comment b'#     SHARED by default w/  BUILD_SHARED_LIBS.'>
<Comment b'#   OBJECT'>
<Comment b'#     Also create an OBJECT library target. Default if STATIC && SHARED.'>
<Comment b'#   MODULE'>
<Comment b'#     Target ${name} might not be created on unsupported platforms.'>
<Comment b'#     Check with "if(TARGET ${name})".'>
<Comment b'#   DISABLE_LLVM_LINK_LLVM_DYLIB'>
<Comment b'#     Do not link this library to libLLVM, even if'>
<Comment b'#     LLVM_LINK_LLVM_DYLIB is enabled.'>
<Comment b'#   OUTPUT_NAME name'>
<Comment b'#     Corresponds to OUTPUT_NAME in target properties.'>
<Comment b'#   DEPENDS targets...'>
<Comment b'#     Same semantics as add_dependencies().'>
<Comment b'#   LINK_COMPONENTS components...'>
<Comment b'#     Same as the variable LLVM_LINK_COMPONENTS.'>
<Comment b'#   LINK_LIBS lib_targets...'>
<Comment b'#     Same semantics as target_link_libraries().'>
<Comment b'#   ADDITIONAL_HEADERS'>
<Comment b'#     May specify header files for IDE generators.'>
<Comment b'#   SONAME'>
<Comment b'#     Should set SONAME link flags and create symlinks'>
<Comment b'#   PLUGIN_TOOL'>
<Comment b'#     The tool (i.e. cmake target) that this plugin will link against'>
<Comment b'#   )'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'llvm_add_library'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'"MODULE;SHARED;STATIC;OBJECT;DISABLE_LLVM_LINK_LLVM_DYLIB;SONAME"'>
<QuotedArgument b'"OUTPUT_NAME;PLUGIN_TOOL"'>
<QuotedArgument b'"ADDITIONAL_HEADERS;DEPENDS;LINK_COMPONENTS;LINK_LIBS;OBJLIBS"'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMMON_DEPENDS'>
<UnquotedArgument b'${ARG_DEPENDS}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_ADDITIONAL_HEADERS'>
<Ket b')'>
<Comment b'# Pass through ADDITIONAL_HEADERS.'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ARG_ADDITIONAL_HEADERS'>
<UnquotedArgument b'ADDITIONAL_HEADERS'>
<UnquotedArgument b'${ARG_ADDITIONAL_HEADERS}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_OBJLIBS'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ALL_FILES'>
<UnquotedArgument b'${ARG_OBJLIBS}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'llvm_process_sources'>
<Bra b'('>
<UnquotedArgument b'ALL_FILES'>
<UnquotedArgument b'${ARG_UNPARSED_ARGUMENTS}'>
<UnquotedArgument b'${ARG_ADDITIONAL_HEADERS}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_MODULE'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_SHARED'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'ARG_STATIC'>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'WARNING'>
<QuotedArgument b'"MODULE with SHARED|STATIC doesn\'t make sense."'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# Plugins that link against a tool are allowed even when plugins in general are not'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_ENABLE_PLUGINS'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<Bra b'('>
<UnquotedArgument b'ARG_PLUGIN_TOOL'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'LLVM_EXPORT_SYMBOLS_FOR_PLUGINS'>
<Ket b')'>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'STATUS'>
<QuotedArgument b'"${name} ignored -- Loadable modules not supported on this platform."'>
<Ket b')'>
<UnquotedArgument b'return'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_PLUGIN_TOOL'>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'WARNING'>
<QuotedArgument b'"PLUGIN_TOOL without MODULE doesn\'t make sense."'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'BUILD_SHARED_LIBS'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'ARG_STATIC'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ARG_SHARED'>
<UnquotedArgument b'TRUE'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'ARG_SHARED'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ARG_STATIC'>
<UnquotedArgument b'TRUE'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# Generate objlib'>
<UnquotedArgument b'if'>
<Bra b'('>
<Bra b'('>
<UnquotedArgument b'ARG_SHARED'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'ARG_STATIC'>
<Ket b')'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'ARG_OBJECT'>
<Ket b')'>
<Comment b'# Generate an obj library for both targets.'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'obj_name'>
<QuotedArgument b'"obj.${name}"'>
<Ket b')'>
<UnquotedArgument b'add_library'>
<Bra b'('>
<UnquotedArgument b'${obj_name}'>
<UnquotedArgument b'OBJECT'>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<UnquotedArgument b'${ALL_FILES}'>
<Ket b')'>
<UnquotedArgument b'llvm_update_compile_flags'>
<Bra b'('>
<UnquotedArgument b'${obj_name}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ALL_FILES'>
<QuotedArgument b'"$<TARGET_OBJECTS:${obj_name}>"'>
<Ket b')'>
<Comment b'# Do add_dependencies(obj) later due to CMake issue 14747.'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'objlibs'>
<UnquotedArgument b'${obj_name}'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${obj_name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'FOLDER'>
<QuotedArgument b'"Object Libraries"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_SHARED'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'ARG_STATIC'>
<Ket b')'>
<Comment b'# static'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'name_static'>
<QuotedArgument b'"${name}_static"'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_OUTPUT_NAME'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'output_name'>
<UnquotedArgument b'OUTPUT_NAME'>
<QuotedArgument b'"${ARG_OUTPUT_NAME}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# DEPENDS has been appended to LLVM_COMMON_LIBS.'>
<UnquotedArgument b'llvm_add_library'>
<Bra b'('>
<UnquotedArgument b'${name_static}'>
<UnquotedArgument b'STATIC'>
<UnquotedArgument b'${output_name}'>
<UnquotedArgument b'OBJLIBS'>
<UnquotedArgument b'${ALL_FILES}'>
<Comment b'# objlib'>
<UnquotedArgument b'LINK_LIBS'>
<UnquotedArgument b'${ARG_LINK_LIBS}'>
<UnquotedArgument b'LINK_COMPONENTS'>
<UnquotedArgument b'${ARG_LINK_COMPONENTS}'>
<Ket b')'>
<Comment b"# FIXME: Add name_static to anywhere in TARGET ${name}'s PROPERTY.">
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ARG_STATIC'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_MODULE'>
<Ket b')'>
<UnquotedArgument b'add_library'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'MODULE'>
<UnquotedArgument b'${ALL_FILES}'>
<Ket b')'>
<UnquotedArgument b'llvm_setup_rpath'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'ARG_SHARED'>
<Ket b')'>
<UnquotedArgument b'add_windows_version_resource_file'>
<Bra b'('>
<UnquotedArgument b'ALL_FILES'>
<UnquotedArgument b'${ALL_FILES}'>
<Ket b')'>
<UnquotedArgument b'add_library'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'SHARED'>
<UnquotedArgument b'${ALL_FILES}'>
<Ket b')'>
<UnquotedArgument b'llvm_setup_rpath'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_library'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'STATIC'>
<UnquotedArgument b'${ALL_FILES}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'setup_dependency_debugging'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${LLVM_COMMON_DEPENDS}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'DEFINED'>
<UnquotedArgument b'windows_resource_file'>
<Ket b')'>
<UnquotedArgument b'set_windows_version_resource_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${windows_resource_file}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'windows_resource_file'>
<UnquotedArgument b'${windows_resource_file}'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set_output_directory'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'BINARY_DIR'>
<UnquotedArgument b'${LLVM_RUNTIME_OUTPUT_INTDIR}'>
<UnquotedArgument b'LIBRARY_DIR'>
<UnquotedArgument b'${LLVM_LIBRARY_OUTPUT_INTDIR}'>
<Ket b')'>
<Comment b"# $<TARGET_OBJECTS> doesn't require compile flags.">
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'obj_name'>
<Ket b')'>
<UnquotedArgument b'llvm_update_compile_flags'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_link_opts'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_OUTPUT_NAME'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'OUTPUT_NAME'>
<UnquotedArgument b'${ARG_OUTPUT_NAME}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_MODULE'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'PREFIX'>
<QuotedArgument b'""'>
<UnquotedArgument b'SUFFIX'>
<UnquotedArgument b'${LLVM_PLUGIN_EXT}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_SHARED'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'WIN32'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'PREFIX'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# Set SOVERSION on shared libraries that lack explicit SONAME'>
<Comment b'# specifier, on *nix systems that are not Darwin.'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'UNIX'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'APPLE'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'ARG_SONAME'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<Comment b'# Since 4.0.0, the ABI version is indicated by the major version'>
<UnquotedArgument b'SOVERSION'>
<UnquotedArgument b'${LLVM_VERSION_MAJOR}'>
<UnquotedArgument b'VERSION'>
<UnquotedArgument b'${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_MODULE'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'ARG_SHARED'>
<Ket b')'>
<Comment b'# Do not add -Dname_EXPORTS to the command-line when building files in this'>
<Comment b'# target. Doing so is actively harmful for the modules build because it'>
<Comment b"# creates extra module variants, and not useful because we don't use these">
<Comment b'# macros.'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'DEFINE_SYMBOL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_EXPORTED_SYMBOL_FILE'>
<Ket b')'>
<UnquotedArgument b'add_llvm_symbol_exports'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${LLVM_EXPORTED_SYMBOL_FILE}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_SHARED'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'UNIX'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'APPLE'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'ARG_SONAME'>
<Ket b')'>
<UnquotedArgument b'get_target_property'>
<Bra b'('>
<UnquotedArgument b'output_name'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'OUTPUT_NAME'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${output_name}'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"output_name-NOTFOUND"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'output_name'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'library_name'>
<UnquotedArgument b'${output_name}-${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}${LLVM_VERSION_SUFFIX}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'api_name'>
<UnquotedArgument b'${output_name}-${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'OUTPUT_NAME'>
<UnquotedArgument b'${library_name}'>
<Ket b')'>
<UnquotedArgument b'llvm_install_library_symlink'>
<Bra b'('>
<UnquotedArgument b'${api_name}'>
<UnquotedArgument b'${library_name}'>
<UnquotedArgument b'SHARED'>
<UnquotedArgument b'COMPONENT'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'ALWAYS_GENERATE'>
<Ket b')'>
<UnquotedArgument b'llvm_install_library_symlink'>
<Bra b'('>
<UnquotedArgument b'${output_name}'>
<UnquotedArgument b'${library_name}'>
<UnquotedArgument b'SHARED'>
<UnquotedArgument b'COMPONENT'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'ALWAYS_GENERATE'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_MODULE'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'LLVM_EXPORT_SYMBOLS_FOR_PLUGINS'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'ARG_PLUGIN_TOOL'>
<UnquotedArgument b'AND'>
<Bra b'('>
<UnquotedArgument b'WIN32'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'CYGWIN'>
<Ket b')'>
<Ket b')'>
<Comment b'# On DLL platforms symbols are imported from the tool by linking against it.'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'llvm_libs'>
<UnquotedArgument b'${ARG_PLUGIN_TOOL}'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'DEFINED'>
<UnquotedArgument b'LLVM_LINK_COMPONENTS'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'DEFINED'>
<UnquotedArgument b'ARG_LINK_COMPONENTS'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_LINK_LLVM_DYLIB'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'ARG_DISABLE_LLVM_LINK_LLVM_DYLIB'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'llvm_libs'>
<UnquotedArgument b'LLVM'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'llvm_map_components_to_libnames'>
<Bra b'('>
<UnquotedArgument b'llvm_libs'>
<UnquotedArgument b'${ARG_LINK_COMPONENTS}'>
<UnquotedArgument b'${LLVM_LINK_COMPONENTS}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<Comment b'# Components have not been defined explicitly in CMake, so add the'>
<Comment b'# dependency information for this library as defined by LLVMBuild.'>
<Comment b'#'>
<Comment b'# It would be nice to verify that we have the dependencies for this library'>
<Comment b"# name, but using get_property(... SET) doesn't suffice to determine if a">
<Comment b'# property has been set to an empty value.'>
<UnquotedArgument b'get_property'>
<Bra b'('>
<UnquotedArgument b'lib_deps'>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVMBUILD_LIB_DEPS_${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_STATIC'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'libtype'>
<UnquotedArgument b'INTERFACE'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<Comment b'# We can use PRIVATE since SO knows its dependent libs.'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'libtype'>
<UnquotedArgument b'PRIVATE'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'target_link_libraries'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${libtype}'>
<UnquotedArgument b'${ARG_LINK_LIBS}'>
<UnquotedArgument b'${lib_deps}'>
<UnquotedArgument b'${llvm_libs}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_COMMON_DEPENDS'>
<Ket b')'>
<UnquotedArgument b'add_dependencies'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${LLVM_COMMON_DEPENDS}'>
<Ket b')'>
<Comment b'# Add dependencies also to objlibs.'>
<Comment b"# CMake issue 14747 --  add_dependencies() might be ignored to objlib's user.">
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'objlib'>
<UnquotedArgument b'${objlibs}'>
<Ket b')'>
<UnquotedArgument b'add_dependencies'>
<Bra b'('>
<UnquotedArgument b'${objlib}'>
<UnquotedArgument b'${LLVM_COMMON_DEPENDS}'>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_SHARED'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'ARG_MODULE'>
<Ket b')'>
<UnquotedArgument b'llvm_externalize_debuginfo'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'add_llvm_install_targets'>
<UnquotedArgument b'target'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'""'>
<QuotedArgument b'"COMPONENT;PREFIX"'>
<QuotedArgument b'"DEPENDS"'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_COMPONENT'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'component_option'>
<UnquotedArgument b'-DCMAKE_INSTALL_COMPONENT='>
<QuotedArgument b'"${ARG_COMPONENT}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_PREFIX'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'prefix_option'>
<UnquotedArgument b'-DCMAKE_INSTALL_PREFIX='>
<QuotedArgument b'"${ARG_PREFIX}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_custom_target'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${ARG_DEPENDS}'>
<UnquotedArgument b'COMMAND'>
<QuotedArgument b'"${CMAKE_COMMAND}"'>
<UnquotedArgument b'${component_option}'>
<UnquotedArgument b'${prefix_option}'>
<UnquotedArgument b'-P'>
<QuotedArgument b'"${CMAKE_BINARY_DIR}/cmake_install.cmake"'>
<UnquotedArgument b'USES_TERMINAL'>
<Ket b')'>
<UnquotedArgument b'add_custom_target'>
<Bra b'('>
<UnquotedArgument b'${target}-stripped'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${ARG_DEPENDS}'>
<UnquotedArgument b'COMMAND'>
<QuotedArgument b'"${CMAKE_COMMAND}"'>
<UnquotedArgument b'${component_option}'>
<UnquotedArgument b'${prefix_option}'>
<UnquotedArgument b'-DCMAKE_INSTALL_DO_STRIP=1'>
<UnquotedArgument b'-P'>
<QuotedArgument b'"${CMAKE_BINARY_DIR}/cmake_install.cmake"'>
<UnquotedArgument b'USES_TERMINAL'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_library'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'"SHARED;BUILDTREE_ONLY"'>
<QuotedArgument b'""'>
<QuotedArgument b'""'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'BUILD_SHARED_LIBS'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'ARG_SHARED'>
<Ket b')'>
<UnquotedArgument b'llvm_add_library'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'SHARED'>
<UnquotedArgument b'${ARG_UNPARSED_ARGUMENTS}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'llvm_add_library'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${ARG_UNPARSED_ARGUMENTS}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# Libraries that are meant to only be exposed via the build tree only are'>
<Comment b'# never installed and are only exported as a target in the special build tree'>
<Comment b'# config file.'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'ARG_BUILDTREE_ONLY'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_LIBS'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'ARG_BUILDTREE_ONLY'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_EXPORTS_BUILDTREE_ONLY'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_INSTALL_TOOLCHAIN_ONLY'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"LTO"'>
<UnquotedArgument b'OR'>
<Bra b'('>
<UnquotedArgument b'LLVM_LINK_LLVM_DYLIB'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"LLVM"'>
<Ket b')'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'install_dir'>
<UnquotedArgument b'lib${LLVM_LIBDIR_SUFFIX}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_SHARED'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'BUILD_SHARED_LIBS'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'WIN32'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'CYGWIN'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'MINGW'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'install_type'>
<UnquotedArgument b'RUNTIME'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'install_dir'>
<UnquotedArgument b'bin'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'install_type'>
<UnquotedArgument b'LIBRARY'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'install_type'>
<UnquotedArgument b'ARCHIVE'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'IN_LIST'>
<UnquotedArgument b'LLVM_DISTRIBUTION_COMPONENTS'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_DISTRIBUTION_COMPONENTS'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'export_to_llvmexports'>
<UnquotedArgument b'EXPORT'>
<UnquotedArgument b'LLVMExports'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_HAS_EXPORTS'>
<UnquotedArgument b'True'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'install'>
<Bra b'('>
<UnquotedArgument b'TARGETS'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${export_to_llvmexports}'>
<UnquotedArgument b'${install_type}'>
<UnquotedArgument b'DESTINATION'>
<UnquotedArgument b'${install_dir}'>
<UnquotedArgument b'COMPONENT'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'CMAKE_CONFIGURATION_TYPES'>
<Ket b')'>
<UnquotedArgument b'add_llvm_install_targets'>
<Bra b'('>
<UnquotedArgument b'install-${name}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'COMPONENT'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_EXPORTS'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'FOLDER'>
<QuotedArgument b'"Libraries"'>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_library'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_loadable_module'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'llvm_add_library'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'MODULE'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<Comment b'# Add empty "phony" target'>
<UnquotedArgument b'add_custom_target'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_INSTALL_TOOLCHAIN_ONLY'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'WIN32'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'CYGWIN'>
<Ket b')'>
<Comment b'# DLL platform'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'dlldir'>
<QuotedArgument b'"bin"'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'dlldir'>
<QuotedArgument b'"lib${LLVM_LIBDIR_SUFFIX}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'IN_LIST'>
<UnquotedArgument b'LLVM_DISTRIBUTION_COMPONENTS'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_DISTRIBUTION_COMPONENTS'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'export_to_llvmexports'>
<UnquotedArgument b'EXPORT'>
<UnquotedArgument b'LLVMExports'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_HAS_EXPORTS'>
<UnquotedArgument b'True'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'install'>
<Bra b'('>
<UnquotedArgument b'TARGETS'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${export_to_llvmexports}'>
<UnquotedArgument b'LIBRARY'>
<UnquotedArgument b'DESTINATION'>
<UnquotedArgument b'${dlldir}'>
<UnquotedArgument b'ARCHIVE'>
<UnquotedArgument b'DESTINATION'>
<UnquotedArgument b'lib${LLVM_LIBDIR_SUFFIX}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_EXPORTS'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'FOLDER'>
<QuotedArgument b'"Loadable modules"'>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_loadable_module'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_executable'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'"DISABLE_LLVM_LINK_LLVM_DYLIB;IGNORE_EXTERNALIZE_DEBUGINFO;NO_INSTALL_RPATH"'>
<QuotedArgument b'""'>
<QuotedArgument b'"DEPENDS"'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'llvm_process_sources'>
<Bra b'('>
<UnquotedArgument b'ALL_FILES'>
<UnquotedArgument b'${ARG_UNPARSED_ARGUMENTS}'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMMON_DEPENDS'>
<UnquotedArgument b'${ARG_DEPENDS}'>
<Ket b')'>
<Comment b'# Generate objlib'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_ENABLE_OBJLIB'>
<Ket b')'>
<Comment b'# Generate an obj library for both targets.'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'obj_name'>
<QuotedArgument b'"obj.${name}"'>
<Ket b')'>
<UnquotedArgument b'add_library'>
<Bra b'('>
<UnquotedArgument b'${obj_name}'>
<UnquotedArgument b'OBJECT'>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<UnquotedArgument b'${ALL_FILES}'>
<Ket b')'>
<UnquotedArgument b'llvm_update_compile_flags'>
<Bra b'('>
<UnquotedArgument b'${obj_name}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ALL_FILES'>
<QuotedArgument b'"$<TARGET_OBJECTS:${obj_name}>"'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${obj_name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'FOLDER'>
<QuotedArgument b'"Object Libraries"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_windows_version_resource_file'>
<Bra b'('>
<UnquotedArgument b'ALL_FILES'>
<UnquotedArgument b'${ALL_FILES}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'XCODE'>
<Ket b')'>
<Comment b'# Note: the dummy.cpp source file provides no definitions. However,'>
<Comment b'# it forces Xcode to properly link the static library.'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'ALL_FILES'>
<QuotedArgument b'"${LLVM_MAIN_SRC_DIR}/cmake/dummy.cpp"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<Ket b')'>
<UnquotedArgument b'add_executable'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<UnquotedArgument b'${ALL_FILES}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_executable'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${ALL_FILES}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'setup_dependency_debugging'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${LLVM_COMMON_DEPENDS}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'ARG_NO_INSTALL_RPATH'>
<Ket b')'>
<UnquotedArgument b'llvm_setup_rpath'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'DEFINED'>
<UnquotedArgument b'windows_resource_file'>
<Ket b')'>
<UnquotedArgument b'set_windows_version_resource_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${windows_resource_file}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b"# $<TARGET_OBJECTS> doesn't require compile flags.">
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_ENABLE_OBJLIB'>
<Ket b')'>
<UnquotedArgument b'llvm_update_compile_flags'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_link_opts'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<Ket b')'>
<Comment b'# Do not add -Dname_EXPORTS to the command-line when building files in this'>
<Comment b'# target. Doing so is actively harmful for the modules build because it'>
<Comment b"# creates extra module variants, and not useful because we don't use these">
<Comment b'# macros.'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'DEFINE_SYMBOL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_EXPORTED_SYMBOL_FILE'>
<Ket b')'>
<UnquotedArgument b'add_llvm_symbol_exports'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${LLVM_EXPORTED_SYMBOL_FILE}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<UnquotedArgument b'LLVM_EXPORTED_SYMBOL_FILE'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_LINK_LLVM_DYLIB'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'ARG_DISABLE_LLVM_LINK_LLVM_DYLIB'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'USE_SHARED'>
<UnquotedArgument b'USE_SHARED'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<UnquotedArgument b'OFF'>
<Ket b')'>
<UnquotedArgument b'set_output_directory'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'BINARY_DIR'>
<UnquotedArgument b'${LLVM_RUNTIME_OUTPUT_INTDIR}'>
<UnquotedArgument b'LIBRARY_DIR'>
<UnquotedArgument b'${LLVM_LIBRARY_OUTPUT_INTDIR}'>
<Ket b')'>
<UnquotedArgument b'llvm_config'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${USE_SHARED}'>
<UnquotedArgument b'${LLVM_LINK_COMPONENTS}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_COMMON_DEPENDS'>
<Ket b')'>
<UnquotedArgument b'add_dependencies'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${LLVM_COMMON_DEPENDS}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<UnquotedArgument b'LLVM_COMMON_DEPENDS'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'ARG_IGNORE_EXTERNALIZE_DEBUGINFO'>
<Ket b')'>
<UnquotedArgument b'llvm_externalize_debuginfo'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_PTHREAD_LIB'>
<Ket b')'>
<Comment b'# libpthreads overrides some standard library symbols, so main'>
<Comment b'# executable must be linked with it in order to provide consistent'>
<Comment b'# API for all shared libaries loaded by this executable.'>
<UnquotedArgument b'target_link_libraries'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PRIVATE'>
<UnquotedArgument b'${LLVM_PTHREAD_LIB}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_executable'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'export_executable_symbols'>
<UnquotedArgument b'target'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_EXPORTED_SYMBOL_FILE'>
<Ket b')'>
<Comment b'# The symbol file should contain the symbols we want the executable to'>
<Comment b'# export'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'ENABLE_EXPORTS'>
<UnquotedArgument b'1'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'LLVM_EXPORT_SYMBOLS_FOR_PLUGINS'>
<Ket b')'>
<Comment b'# Extract the symbols to export from the static libraries that the'>
<Comment b'# executable links against.'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'ENABLE_EXPORTS'>
<UnquotedArgument b'1'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'exported_symbol_file'>
<UnquotedArgument b'${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/${target}.symbols'>
<Ket b')'>
<Comment b'# We need to consider not just the direct link dependencies, but also the'>
<Comment b'# transitive link dependencies. Do this by starting with the set of direct'>
<Comment b'# dependencies, then the dependencies of those dependencies, and so on.'>
<UnquotedArgument b'get_target_property'>
<Bra b'('>
<UnquotedArgument b'new_libs'>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'LINK_LIBRARIES'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'link_libs'>
<UnquotedArgument b'${new_libs}'>
<Ket b')'>
<UnquotedArgument b'while'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<QuotedArgument b'"${new_libs}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'lib'>
<UnquotedArgument b'${new_libs}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${lib}'>
<Ket b')'>
<UnquotedArgument b'get_target_property'>
<Bra b'('>
<UnquotedArgument b'lib_type'>
<UnquotedArgument b'${lib}'>
<UnquotedArgument b'TYPE'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<QuotedArgument b'"${lib_type}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"STATIC_LIBRARY"'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'static_libs'>
<UnquotedArgument b'${lib}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'other_libs'>
<UnquotedArgument b'${lib}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'get_target_property'>
<Bra b'('>
<UnquotedArgument b'transitive_libs'>
<UnquotedArgument b'${lib}'>
<UnquotedArgument b'INTERFACE_LINK_LIBRARIES'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'transitive_lib'>
<UnquotedArgument b'${transitive_libs}'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'FIND'>
<UnquotedArgument b'link_libs'>
<UnquotedArgument b'${transitive_lib}'>
<UnquotedArgument b'idx'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${transitive_lib}'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'idx'>
<UnquotedArgument b'EQUAL'>
<UnquotedArgument b'-1'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'newer_libs'>
<UnquotedArgument b'${transitive_lib}'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'link_libs'>
<UnquotedArgument b'${transitive_lib}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<UnquotedArgument b'transitive_lib'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<UnquotedArgument b'lib'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'new_libs'>
<UnquotedArgument b'${newer_libs}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'newer_libs'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'endwhile'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'MSVC'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'mangling'>
<UnquotedArgument b'microsoft'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'mangling'>
<UnquotedArgument b'itanium'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_custom_command'>
<Bra b'('>
<UnquotedArgument b'OUTPUT'>
<UnquotedArgument b'${exported_symbol_file}'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'${PYTHON_EXECUTABLE}'>
<UnquotedArgument b'${LLVM_MAIN_SRC_DIR}/utils/extract_symbols.py'>
<UnquotedArgument b'--mangling=${mangling}'>
<UnquotedArgument b'${static_libs}'>
<UnquotedArgument b'-o'>
<UnquotedArgument b'${exported_symbol_file}'>
<UnquotedArgument b'WORKING_DIRECTORY'>
<UnquotedArgument b'${LLVM_LIBRARY_OUTPUT_INTDIR}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${LLVM_MAIN_SRC_DIR}/utils/extract_symbols.py'>
<UnquotedArgument b'${static_libs}'>
<UnquotedArgument b'VERBATIM'>
<UnquotedArgument b'COMMENT'>
<QuotedArgument b'"Generating export list for ${target}"'>
<Ket b')'>
<UnquotedArgument b'add_llvm_symbol_exports'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'${exported_symbol_file}'>
<Ket b')'>
<Comment b'# If something links against this executable then we want a'>
<Comment b'# transitive link against only the libraries whose symbols'>
<Comment b"# we aren't exporting.">
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'INTERFACE_LINK_LIBRARIES'>
<QuotedArgument b'"${other_libs}"'>
<Ket b')'>
<Comment b'# The default import library suffix that cmake uses for cygwin/mingw is'>
<Comment b'# ".dll.a", but for clang.exe that causes a collision with libclang.dll,'>
<Comment b'# where the import libraries of both get named libclang.dll.a. Use a suffix'>
<Comment b'# of ".exe.a" to avoid this.'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'CYGWIN'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'MINGW'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'IMPORT_SUFFIX'>
<QuotedArgument b'".exe.a"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<Bra b'('>
<UnquotedArgument b'WIN32'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'CYGWIN'>
<Ket b')'>
<Ket b')'>
<Comment b"# On Windows auto-exporting everything doesn't work because of the limit on">
<Comment b'# the size of the exported symbol table, but on other platforms we can do'>
<Comment b'# it without any trouble.'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'ENABLE_EXPORTS'>
<UnquotedArgument b'1'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'APPLE'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'" -rdynamic"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_TOOLCHAIN_TOOLS'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_TOOLCHAIN_TOOLS'>
<UnquotedArgument b'llvm-ar'>
<UnquotedArgument b'llvm-ranlib'>
<UnquotedArgument b'llvm-lib'>
<UnquotedArgument b'llvm-objdump'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_tool'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_BUILD_TOOLS'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_llvm_executable'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'IN_LIST'>
<UnquotedArgument b'LLVM_TOOLCHAIN_TOOLS'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_INSTALL_TOOLCHAIN_ONLY'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_BUILD_TOOLS'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'IN_LIST'>
<UnquotedArgument b'LLVM_DISTRIBUTION_COMPONENTS'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_DISTRIBUTION_COMPONENTS'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'export_to_llvmexports'>
<UnquotedArgument b'EXPORT'>
<UnquotedArgument b'LLVMExports'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_HAS_EXPORTS'>
<UnquotedArgument b'True'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'install'>
<Bra b'('>
<UnquotedArgument b'TARGETS'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${export_to_llvmexports}'>
<UnquotedArgument b'RUNTIME'>
<UnquotedArgument b'DESTINATION'>
<UnquotedArgument b'${LLVM_TOOLS_INSTALL_DIR}'>
<UnquotedArgument b'COMPONENT'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'CMAKE_CONFIGURATION_TYPES'>
<Ket b')'>
<UnquotedArgument b'add_llvm_install_targets'>
<Bra b'('>
<UnquotedArgument b'install-${name}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'COMPONENT'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_BUILD_TOOLS'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_EXPORTS'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'FOLDER'>
<QuotedArgument b'"Tools"'>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_tool'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_example'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_BUILD_EXAMPLES'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_llvm_executable'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_BUILD_EXAMPLES'>
<Ket b')'>
<UnquotedArgument b'install'>
<Bra b'('>
<UnquotedArgument b'TARGETS'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'RUNTIME'>
<UnquotedArgument b'DESTINATION'>
<UnquotedArgument b'examples'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'FOLDER'>
<QuotedArgument b'"Examples"'>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_example'>
<UnquotedArgument b'name'>
<Ket b')'>
<Comment b'# This is a macro that is used to create targets for executables that are needed'>
<Comment b'# for development, but that are not intended to be installed by default.'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_utility'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_BUILD_UTILS'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_llvm_executable'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'DISABLE_LLVM_LINK_LLVM_DYLIB'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'FOLDER'>
<QuotedArgument b'"Utils"'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_INSTALL_UTILS'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'LLVM_BUILD_UTILS'>
<Ket b')'>
<UnquotedArgument b'install'>
<Bra b'('>
<UnquotedArgument b'TARGETS'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'RUNTIME'>
<UnquotedArgument b'DESTINATION'>
<UnquotedArgument b'${LLVM_UTILS_INSTALL_DIR}'>
<UnquotedArgument b'COMPONENT'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'CMAKE_CONFIGURATION_TYPES'>
<Ket b')'>
<UnquotedArgument b'add_llvm_install_targets'>
<Bra b'('>
<UnquotedArgument b'install-${name}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'COMPONENT'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_utility'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_fuzzer'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'""'>
<QuotedArgument b'"DUMMY_MAIN"'>
<QuotedArgument b'""'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_LIB_FUZZING_ENGINE'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_OPTIONAL_SOURCES'>
<UnquotedArgument b'${ARG_DUMMY_MAIN}'>
<Ket b')'>
<UnquotedArgument b'add_llvm_executable'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${ARG_UNPARSED_ARGUMENTS}'>
<Ket b')'>
<UnquotedArgument b'target_link_libraries'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PRIVATE'>
<UnquotedArgument b'${LLVM_LIB_FUZZING_ENGINE}'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'FOLDER'>
<QuotedArgument b'"Fuzzers"'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'LLVM_USE_SANITIZE_COVERAGE'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'CMAKE_CXX_FLAGS'>
<QuotedArgument b'"${CMAKE_CXX_FLAGS} -fsanitize=fuzzer"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_OPTIONAL_SOURCES'>
<UnquotedArgument b'${ARG_DUMMY_MAIN}'>
<Ket b')'>
<UnquotedArgument b'add_llvm_executable'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${ARG_UNPARSED_ARGUMENTS}'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'FOLDER'>
<QuotedArgument b'"Fuzzers"'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'ARG_DUMMY_MAIN'>
<Ket b')'>
<UnquotedArgument b'add_llvm_executable'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${ARG_DUMMY_MAIN}'>
<UnquotedArgument b'${ARG_UNPARSED_ARGUMENTS}'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'FOLDER'>
<QuotedArgument b'"Fuzzers"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_target'>
<UnquotedArgument b'target_name'>
<Ket b')'>
<UnquotedArgument b'include_directories'>
<Bra b'('>
<UnquotedArgument b'BEFORE'>
<UnquotedArgument b'${CMAKE_CURRENT_BINARY_DIR}'>
<UnquotedArgument b'${CMAKE_CURRENT_SOURCE_DIR}'>
<Ket b')'>
<UnquotedArgument b'add_llvm_library'>
<Bra b'('>
<UnquotedArgument b'LLVM${target_name}'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'CURRENT_LLVM_TARGET'>
<UnquotedArgument b'LLVM${target_name}'>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_target'>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'canonicalize_tool_name'>
<UnquotedArgument b'name'>
<UnquotedArgument b'output'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<QuotedArgument b'"${CMAKE_CURRENT_SOURCE_DIR}/"'>
<QuotedArgument b'""'>
<UnquotedArgument b'nameStrip'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<QuotedArgument b'"-"'>
<QuotedArgument b'"_"'>
<UnquotedArgument b'nameUNDERSCORE'>
<UnquotedArgument b'${nameStrip}'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'TOUPPER'>
<UnquotedArgument b'${nameUNDERSCORE}'>
<UnquotedArgument b'nameUPPER'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${output}'>
<QuotedArgument b'"${nameUPPER}"'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<UnquotedArgument b'canonicalize_tool_name'>
<Ket b')'>
<Comment b'# Custom add_subdirectory wrapper'>
<Comment b'# Takes in a project name (i.e. LLVM), the subdirectory name, and an optional'>
<Comment b'# path if it differs from the name.'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_subdirectory'>
<UnquotedArgument b'project'>
<UnquotedArgument b'type'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'add_llvm_external_dir'>
<QuotedArgument b'"${ARGN}"'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<QuotedArgument b'"${add_llvm_external_dir}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'add_llvm_external_dir'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'canonicalize_tool_name'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'nameUPPER'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'EXISTS'>
<UnquotedArgument b'${CMAKE_CURRENT_SOURCE_DIR}/${add_llvm_external_dir}/CMakeLists.txt'>
<Ket b')'>
<Comment b'# Treat it as in-tree subproject.'>
<UnquotedArgument b'option'>
<Bra b'('>
<UnquotedArgument b'${project}_${type}_${nameUPPER}_BUILD'>
<QuotedArgument b'"Whether to build ${name} as part of ${project}"'>
<UnquotedArgument b'On'>
<Ket b')'>
<UnquotedArgument b'mark_as_advanced'>
<Bra b'('>
<UnquotedArgument b'${project}_${type}_${name}_BUILD'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${project}_${type}_${nameUPPER}_BUILD'>
<Ket b')'>
<UnquotedArgument b'add_subdirectory'>
<Bra b'('>
<UnquotedArgument b'${CMAKE_CURRENT_SOURCE_DIR}/${add_llvm_external_dir}'>
<UnquotedArgument b'${add_llvm_external_dir}'>
<Ket b')'>
<Comment b"# Don't process it in add_llvm_implicit_projects().">
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${project}_${type}_${nameUPPER}_BUILD'>
<UnquotedArgument b'OFF'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_EXTERNAL_${nameUPPER}_SOURCE_DIR'>
<QuotedArgument b'"${LLVM_EXTERNAL_${nameUPPER}_SOURCE_DIR}"'>
<UnquotedArgument b'CACHE'>
<UnquotedArgument b'PATH'>
<QuotedArgument b'"Path to ${name} source directory"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${project}_${type}_${nameUPPER}_BUILD_DEFAULT'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_EXTERNAL_${nameUPPER}_SOURCE_DIR'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'EXISTS'>
<UnquotedArgument b'${LLVM_EXTERNAL_${nameUPPER}_SOURCE_DIR}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${project}_${type}_${nameUPPER}_BUILD_DEFAULT'>
<UnquotedArgument b'OFF'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<QuotedArgument b'"${LLVM_EXTERNAL_${nameUPPER}_BUILD}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"OFF"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${project}_${type}_${nameUPPER}_BUILD_DEFAULT'>
<UnquotedArgument b'OFF'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'option'>
<Bra b'('>
<UnquotedArgument b'${project}_${type}_${nameUPPER}_BUILD'>
<QuotedArgument b'"Whether to build ${name} as part of LLVM"'>
<UnquotedArgument b'${${project}_${type}_${nameUPPER}_BUILD_DEFAULT}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${project}_${type}_${nameUPPER}_BUILD'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'EXISTS'>
<UnquotedArgument b'${LLVM_EXTERNAL_${nameUPPER}_SOURCE_DIR}'>
<Ket b')'>
<UnquotedArgument b'add_subdirectory'>
<Bra b'('>
<UnquotedArgument b'${LLVM_EXTERNAL_${nameUPPER}_SOURCE_DIR}'>
<UnquotedArgument b'${add_llvm_external_dir}'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<QuotedArgument b'"${LLVM_EXTERNAL_${nameUPPER}_SOURCE_DIR}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'WARNING'>
<QuotedArgument b'"Nonexistent directory for ${name}: ${LLVM_EXTERNAL_${nameUPPER}_SOURCE_DIR}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b"# FIXME: It'd be redundant.">
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${project}_${type}_${nameUPPER}_BUILD'>
<UnquotedArgument b'Off'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<Ket b')'>
<Comment b'# Add external project that may want to be built as part of llvm such as Clang,'>
<Comment b'# lld, and Polly. This adds two options. One for the source directory of the'>
<Comment b'# project, which defaults to ${CMAKE_CURRENT_SOURCE_DIR}/${name}. Another to'>
<Comment b'# enable or disable building it with everything else.'>
<Comment b'# Additional parameter can be specified as the name of directory.'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_external_project'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'add_llvm_subdirectory'>
<Bra b'('>
<UnquotedArgument b'LLVM'>
<UnquotedArgument b'TOOL'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_tool_subdirectory'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'add_llvm_external_project'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<UnquotedArgument b'add_llvm_tool_subdirectory'>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'get_project_name_from_src_var'>
<UnquotedArgument b'var'>
<UnquotedArgument b'output'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REGEX'>
<UnquotedArgument b'MATCH'>
<QuotedArgument b'"LLVM_EXTERNAL_(.*)_SOURCE_DIR"'>
<UnquotedArgument b'MACHED_TOOL'>
<QuotedArgument b'"${var}"'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'MACHED_TOOL'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${output}'>
<UnquotedArgument b'${CMAKE_MATCH_1}'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${output}'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'create_subdirectory_options'>
<UnquotedArgument b'project'>
<UnquotedArgument b'type'>
<Ket b')'>
<UnquotedArgument b'file'>
<Bra b'('>
<UnquotedArgument b'GLOB'>
<UnquotedArgument b'sub-dirs'>
<QuotedArgument b'"${CMAKE_CURRENT_SOURCE_DIR}/*"'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'dir'>
<UnquotedArgument b'${sub-dirs}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'IS_DIRECTORY'>
<QuotedArgument b'"${dir}"'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'EXISTS'>
<QuotedArgument b'"${dir}/CMakeLists.txt"'>
<Ket b')'>
<UnquotedArgument b'canonicalize_tool_name'>
<Bra b'('>
<UnquotedArgument b'${dir}'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'option'>
<Bra b'('>
<UnquotedArgument b'${project}_${type}_${name}_BUILD'>
<QuotedArgument b'"Whether to build ${name} as part of ${project}"'>
<UnquotedArgument b'On'>
<Ket b')'>
<UnquotedArgument b'mark_as_advanced'>
<Bra b'('>
<UnquotedArgument b'${project}_${type}_${name}_BUILD'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<UnquotedArgument b'create_subdirectory_options'>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'create_llvm_tool_options'>
<Ket b')'>
<UnquotedArgument b'create_subdirectory_options'>
<Bra b'('>
<UnquotedArgument b'LLVM'>
<UnquotedArgument b'TOOL'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<UnquotedArgument b'create_llvm_tool_options'>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'llvm_add_implicit_projects'>
<UnquotedArgument b'project'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'list_of_implicit_subdirs'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'file'>
<Bra b'('>
<UnquotedArgument b'GLOB'>
<UnquotedArgument b'sub-dirs'>
<QuotedArgument b'"${CMAKE_CURRENT_SOURCE_DIR}/*"'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'dir'>
<UnquotedArgument b'${sub-dirs}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'IS_DIRECTORY'>
<QuotedArgument b'"${dir}"'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'EXISTS'>
<QuotedArgument b'"${dir}/CMakeLists.txt"'>
<Ket b')'>
<UnquotedArgument b'canonicalize_tool_name'>
<Bra b'('>
<UnquotedArgument b'${dir}'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${project}_TOOL_${name}_BUILD'>
<Ket b')'>
<UnquotedArgument b'get_filename_component'>
<Bra b'('>
<UnquotedArgument b'fn'>
<QuotedArgument b'"${dir}"'>
<UnquotedArgument b'NAME'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'list_of_implicit_subdirs'>
<QuotedArgument b'"${fn}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'external_proj'>
<UnquotedArgument b'${list_of_implicit_subdirs}'>
<Ket b')'>
<UnquotedArgument b'add_llvm_subdirectory'>
<Bra b'('>
<UnquotedArgument b'${project}'>
<UnquotedArgument b'TOOL'>
<QuotedArgument b'"${external_proj}"'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<UnquotedArgument b'llvm_add_implicit_projects'>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'add_llvm_implicit_projects'>
<Ket b')'>
<UnquotedArgument b'llvm_add_implicit_projects'>
<Bra b'('>
<UnquotedArgument b'LLVM'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<UnquotedArgument b'add_llvm_implicit_projects'>
<Ket b')'>
<Comment b'# Generic support for adding a unittest.'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'add_unittest'>
<UnquotedArgument b'test_suite'>
<UnquotedArgument b'test_name'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_BUILD_TESTS'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# Our current version of gtest does not properly recognize C++11 support'>
<Comment b'# with MSVC, so it falls back to tr1 / experimental classes.  Since LLVM'>
<Comment b'# itself requires C++11, we can safely force it on unconditionally so that'>
<Comment b"# we don't have to fight with the buggy gtest check.  ">
<UnquotedArgument b'add_definitions'>
<Bra b'('>
<UnquotedArgument b'-DGTEST_LANG_CXX11=1'>
<Ket b')'>
<UnquotedArgument b'add_definitions'>
<Bra b'('>
<UnquotedArgument b'-DGTEST_HAS_TR1_TUPLE=0'>
<Ket b')'>
<UnquotedArgument b'include_directories'>
<Bra b'('>
<UnquotedArgument b'${LLVM_MAIN_SRC_DIR}/utils/unittest/googletest/include'>
<Ket b')'>
<UnquotedArgument b'include_directories'>
<Bra b'('>
<UnquotedArgument b'${LLVM_MAIN_SRC_DIR}/utils/unittest/googlemock/include'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_ENABLE_THREADS'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMPILE_DEFINITIONS'>
<UnquotedArgument b'GTEST_HAS_PTHREAD=0'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'SUPPORTS_VARIADIC_MACROS_FLAG'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMPILE_FLAGS'>
<QuotedArgument b'"-Wno-variadic-macros"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b"# Some parts of gtest rely on this GNU extension, don't warn on it.">
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'SUPPORTS_GNU_ZERO_VARIADIC_MACRO_ARGUMENTS_FLAG'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_COMPILE_FLAGS'>
<QuotedArgument b'"-Wno-gnu-zero-variadic-macro-arguments"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_REQUIRES_RTTI'>
<UnquotedArgument b'OFF'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LLVM_LINK_COMPONENTS'>
<UnquotedArgument b'Support'>
<Ket b')'>
<Comment b'# gtest needs it for raw_ostream'>
<UnquotedArgument b'add_llvm_executable'>
<Bra b'('>
<UnquotedArgument b'${test_name}'>
<UnquotedArgument b'IGNORE_EXTERNALIZE_DEBUGINFO'>
<UnquotedArgument b'NO_INSTALL_RPATH'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'outdir'>
<UnquotedArgument b'${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}'>
<Ket b')'>
<UnquotedArgument b'set_output_directory'>
<Bra b'('>
<UnquotedArgument b'${test_name}'>
<UnquotedArgument b'BINARY_DIR'>
<UnquotedArgument b'${outdir}'>
<UnquotedArgument b'LIBRARY_DIR'>
<UnquotedArgument b'${outdir}'>
<Ket b')'>
<Comment b'# libpthreads overrides some standard library symbols, so main'>
<Comment b'# executable must be linked with it in order to provide consistent'>
<Comment b'# API for all shared libaries loaded by this executable.'>
<UnquotedArgument b'target_link_libraries'>
<Bra b'('>
<UnquotedArgument b'${test_name}'>
<UnquotedArgument b'PRIVATE'>
<UnquotedArgument b'gtest_main'>
<UnquotedArgument b'gtest'>
<UnquotedArgument b'${LLVM_PTHREAD_LIB}'>
<Ket b')'>
<UnquotedArgument b'add_dependencies'>
<Bra b'('>
<UnquotedArgument b'${test_suite}'>
<UnquotedArgument b'${test_name}'>
<Ket b')'>
<UnquotedArgument b'get_target_property'>
<Bra b'('>
<UnquotedArgument b'test_suite_folder'>
<UnquotedArgument b'${test_suite}'>
<UnquotedArgument b'FOLDER'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'${test_suite_folder}'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"NOTFOUND"'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${test_name}'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'FOLDER'>
<QuotedArgument b'"${test_suite_folder}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'llvm_add_go_executable'>
<UnquotedArgument b'binary'>
<UnquotedArgument b'pkgpath'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'"ALL"'>
<QuotedArgument b'""'>
<QuotedArgument b'"DEPENDS;GOFLAGS"'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_BINDINGS'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"go"'>
<Ket b')'>
<Comment b'# FIXME: This should depend only on the libraries Go needs.'>
<UnquotedArgument b'get_property'>
<Bra b'('>
<UnquotedArgument b'llvmlibs'>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_LIBS'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'binpath'>
<UnquotedArgument b'${CMAKE_BINARY_DIR}/bin/${binary}${CMAKE_EXECUTABLE_SUFFIX}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'cc'>
<QuotedArgument b'"${CMAKE_C_COMPILER} ${CMAKE_C_COMPILER_ARG1}"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'cxx'>
<QuotedArgument b'"${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1}"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'cppflags'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'get_property'>
<Bra b'('>
<UnquotedArgument b'include_dirs'>
<UnquotedArgument b'DIRECTORY'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'INCLUDE_DIRECTORIES'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'd'>
<UnquotedArgument b'${include_dirs}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'cppflags'>
<QuotedArgument b'"${cppflags} -I${d}"'>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<UnquotedArgument b'd'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ldflags'>
<QuotedArgument b'"${CMAKE_EXE_LINKER_FLAGS}"'>
<Ket b')'>
<UnquotedArgument b'add_custom_command'>
<Bra b'('>
<UnquotedArgument b'OUTPUT'>
<UnquotedArgument b'${binpath}'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'${CMAKE_BINARY_DIR}/bin/llvm-go'>
<QuotedArgument b'"go=${GO_EXECUTABLE}"'>
<QuotedArgument b'"cc=${cc}"'>
<QuotedArgument b'"cxx=${cxx}"'>
<QuotedArgument b'"cppflags=${cppflags}"'>
<QuotedArgument b'"ldflags=${ldflags}"'>
<QuotedArgument b'"packages=${LLVM_GO_PACKAGES}"'>
<UnquotedArgument b'${ARG_GOFLAGS}'>
<UnquotedArgument b'build'>
<UnquotedArgument b'-o'>
<UnquotedArgument b'${binpath}'>
<UnquotedArgument b'${pkgpath}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'llvm-config'>
<UnquotedArgument b'${CMAKE_BINARY_DIR}/bin/llvm-go${CMAKE_EXECUTABLE_SUFFIX}'>
<UnquotedArgument b'${llvmlibs}'>
<UnquotedArgument b'${ARG_DEPENDS}'>
<UnquotedArgument b'COMMENT'>
<QuotedArgument b'"Building Go executable ${binary}"'>
<UnquotedArgument b'VERBATIM'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_ALL'>
<Ket b')'>
<UnquotedArgument b'add_custom_target'>
<Bra b'('>
<UnquotedArgument b'${binary}'>
<UnquotedArgument b'ALL'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${binpath}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_custom_target'>
<Bra b'('>
<UnquotedArgument b'${binary}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${binpath}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<Comment b'# This function canonicalize the CMake variables passed by names'>
<Comment b'# from CMake boolean to 0/1 suitable for passing into Python or C++,'>
<Comment b'# in place.'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'llvm_canonicalize_cmake_booleans'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'var'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${var}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${var}'>
<UnquotedArgument b'1'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${var}'>
<UnquotedArgument b'0'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<UnquotedArgument b'llvm_canonicalize_cmake_booleans'>
<Ket b')'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'set_llvm_build_mode'>
<Ket b')'>
<Comment b'# Configuration-time: See Unit/lit.site.cfg.in'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'CMAKE_CFG_INTDIR'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"."'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_BUILD_MODE'>
<QuotedArgument b'"."'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_BUILD_MODE'>
<QuotedArgument b'"%(build_mode)s"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<Ket b')'>
<Comment b"# This function provides an automatic way to 'configure'-like generate a file">
<Comment b'# based on a set of common and custom variables, specifically targeting the'>
<Comment b"# variables needed for the 'lit.site.cfg' files. This function bundles the">
<Comment b'# common variables that any Lit instance is likely to need, and custom'>
<Comment b'# variables can be passed in.'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'configure_lit_site_cfg'>
<UnquotedArgument b'site_in'>
<UnquotedArgument b'site_out'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'""'>
<QuotedArgument b'""'>
<QuotedArgument b'"MAIN_CONFIG;OUTPUT_MAPPING"'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<QuotedArgument b'"${ARG_MAIN_CONFIG}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'get_filename_component'>
<Bra b'('>
<UnquotedArgument b'INPUT_DIR'>
<UnquotedArgument b'${site_in}'>
<UnquotedArgument b'DIRECTORY'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ARG_MAIN_CONFIG'>
<QuotedArgument b'"${INPUT_DIR}/lit.cfg"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<QuotedArgument b'"${ARG_OUTPUT_MAPPING}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ARG_OUTPUT_MAPPING'>
<QuotedArgument b'"${site_out}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'c'>
<UnquotedArgument b'${LLVM_TARGETS_TO_BUILD}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'TARGETS_BUILT'>
<QuotedArgument b'"${TARGETS_BUILT} ${c}"'>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<UnquotedArgument b'c'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'TARGETS_TO_BUILD'>
<UnquotedArgument b'${TARGETS_BUILT}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'SHLIBEXT'>
<QuotedArgument b'"${LTDL_SHLIB_EXT}"'>
<Ket b')'>
<UnquotedArgument b'set_llvm_build_mode'>
<Bra b'('>
<Ket b')'>
<Comment b'# They below might not be the build tree but provided binary tree.'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_SOURCE_DIR'>
<UnquotedArgument b'${LLVM_MAIN_SRC_DIR}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_BINARY_DIR'>
<UnquotedArgument b'${LLVM_BINARY_DIR}'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<QuotedArgument b'"${CMAKE_CFG_INTDIR}"'>
<QuotedArgument b'"${LLVM_BUILD_MODE}"'>
<UnquotedArgument b'LLVM_TOOLS_DIR'>
<QuotedArgument b'"${LLVM_TOOLS_BINARY_DIR}"'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<UnquotedArgument b'${CMAKE_CFG_INTDIR}'>
<UnquotedArgument b'${LLVM_BUILD_MODE}'>
<UnquotedArgument b'LLVM_LIBS_DIR'>
<QuotedArgument b'"${LLVM_LIBRARY_DIR}"'>
<Ket b')'>
<Comment b'# SHLIBDIR points the build tree.'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<QuotedArgument b'"${CMAKE_CFG_INTDIR}"'>
<QuotedArgument b'"${LLVM_BUILD_MODE}"'>
<UnquotedArgument b'SHLIBDIR'>
<QuotedArgument b'"${LLVM_SHLIB_OUTPUT_INTDIR}"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'PYTHON_EXECUTABLE'>
<UnquotedArgument b'${PYTHON_EXECUTABLE}'>
<Ket b')'>
<Comment b'# FIXME: "ENABLE_SHARED" doesn\'t make sense, since it is used just for'>
<Comment b'# plugins. We may rename it.'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_ENABLE_PLUGINS'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ENABLE_SHARED'>
<QuotedArgument b'"1"'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ENABLE_SHARED'>
<QuotedArgument b'"0"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_ENABLE_ASSERTIONS'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'MSVC_IDE'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ENABLE_ASSERTIONS'>
<QuotedArgument b'"1"'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ENABLE_ASSERTIONS'>
<QuotedArgument b'"0"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'HOST_OS'>
<UnquotedArgument b'${CMAKE_SYSTEM_NAME}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'HOST_ARCH'>
<UnquotedArgument b'${CMAKE_SYSTEM_PROCESSOR}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'HOST_CC'>
<QuotedArgument b'"${CMAKE_C_COMPILER} ${CMAKE_C_COMPILER_ARG1}"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'HOST_CXX'>
<QuotedArgument b'"${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1}"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'HOST_LDFLAGS'>
<QuotedArgument b'"${CMAKE_EXE_LINKER_FLAGS}"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LIT_SITE_CFG_IN_HEADER'>
<QuotedArgument b'"## Autogenerated from ${site_in}\\n## Do not edit!"'>
<Ket b')'>
<Comment b'# Override config_target_triple (and the env)'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_TARGET_TRIPLE_ENV'>
<Ket b')'>
<Comment b'# This is expanded into the heading.'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'CONCAT'>
<UnquotedArgument b'LIT_SITE_CFG_IN_HEADER'>
<QuotedArgument b'"${LIT_SITE_CFG_IN_HEADER}\\n\\n"'>
<QuotedArgument b'"import os\\n"'>
<QuotedArgument b'"target_env = \\"${LLVM_TARGET_TRIPLE_ENV}\\"\\n"'>
<QuotedArgument b'"config.target_triple = config.environment[target_env] = os.environ.get(target_env, \\"${TARGET_TRIPLE}\\")\\n"'>
<Ket b')'>
<Comment b'# This is expanded to; config.target_triple = ""+config.target_triple+""'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'TARGET_TRIPLE'>
<QuotedArgument b'"\\"+config.target_triple+\\""'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'CONCAT'>
<UnquotedArgument b'LIT_SITE_CFG_IN_FOOTER'>
<QuotedArgument b'"import lit.llvm\\n"'>
<QuotedArgument b'"lit.llvm.initialize(lit_config, config)\\n"'>
<Ket b')'>
<UnquotedArgument b'configure_file'>
<Bra b'('>
<UnquotedArgument b'${site_in}'>
<UnquotedArgument b'${site_out}'>
<UnquotedArgument b'@ONLY'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'EXISTS'>
<QuotedArgument b'"${ARG_MAIN_CONFIG}"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'PYTHON_STATEMENT'>
<QuotedArgument b'"map_config(\'${ARG_MAIN_CONFIG}\', \'${site_out}\')"'>
<Ket b')'>
<UnquotedArgument b'get_property'>
<Bra b'('>
<UnquotedArgument b'LLVM_LIT_CONFIG_MAP'>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_LIT_CONFIG_MAP'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_LIT_CONFIG_MAP'>
<QuotedArgument b'"${LLVM_LIT_CONFIG_MAP}\\n${PYTHON_STATEMENT}"'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_LIT_CONFIG_MAP'>
<UnquotedArgument b'${LLVM_LIT_CONFIG_MAP}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'dump_all_cmake_variables'>
<Ket b')'>
<UnquotedArgument b'get_cmake_property'>
<Bra b'('>
<UnquotedArgument b'_variableNames'>
<UnquotedArgument b'VARIABLES'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'_variableName'>
<UnquotedArgument b'${_variableNames}'>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'STATUS'>
<QuotedArgument b'"${_variableName}=${${_variableName}}"'>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'get_llvm_lit_path'>
<UnquotedArgument b'base_dir'>
<UnquotedArgument b'file_name'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'"ALLOW_EXTERNAL"'>
<QuotedArgument b'""'>
<QuotedArgument b'""'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_ALLOW_EXTERNAL'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_DEFAULT_EXTERNAL_LIT'>
<QuotedArgument b'"${LLVM_EXTERNAL_LIT}"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_EXTERNAL_LIT'>
<QuotedArgument b'""'>
<UnquotedArgument b'CACHE'>
<UnquotedArgument b'STRING'>
<QuotedArgument b'"Command used to spawn lit"'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<QuotedArgument b'"${LLVM_EXTERNAL_LIT}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_EXTERNAL_LIT'>
<QuotedArgument b'"${LLVM_DEFAULT_EXTERNAL_LIT}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<QuotedArgument b'"${LLVM_EXTERNAL_LIT}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'EXISTS'>
<UnquotedArgument b'${LLVM_EXTERNAL_LIT}'>
<Ket b')'>
<UnquotedArgument b'get_filename_component'>
<Bra b'('>
<UnquotedArgument b'LIT_FILE_NAME'>
<UnquotedArgument b'${LLVM_EXTERNAL_LIT}'>
<UnquotedArgument b'NAME'>
<Ket b')'>
<UnquotedArgument b'get_filename_component'>
<Bra b'('>
<UnquotedArgument b'LIT_BASE_DIR'>
<UnquotedArgument b'${LLVM_EXTERNAL_LIT}'>
<UnquotedArgument b'DIRECTORY'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${file_name}'>
<UnquotedArgument b'${LIT_FILE_NAME}'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${base_dir}'>
<UnquotedArgument b'${LIT_BASE_DIR}'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'return'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'WARN'>
<QuotedArgument b'"LLVM_EXTERNAL_LIT set to ${LLVM_EXTERNAL_LIT}, but the path does not exist."'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'lit_file_name'>
<QuotedArgument b'"llvm-lit"'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'WIN32'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'CYGWIN'>
<Ket b')'>
<Comment b'# llvm-lit needs suffix.py for multiprocess to find a main module.'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'lit_file_name'>
<QuotedArgument b'"${lit_file_name}.py"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${file_name}'>
<UnquotedArgument b'${lit_file_name}'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'get_property'>
<Bra b'('>
<UnquotedArgument b'LLVM_LIT_BASE_DIR'>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_LIT_BASE_DIR'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<QuotedArgument b'"${LLVM_LIT_BASE_DIR}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${base_dir}'>
<UnquotedArgument b'${LLVM_LIT_BASE_DIR}'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# Allow individual projects to provide an override'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<QuotedArgument b'"${LLVM_LIT_OUTPUT_DIR}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_LIT_BASE_DIR'>
<UnquotedArgument b'${LLVM_LIT_OUTPUT_DIR}'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<QuotedArgument b'"${LLVM_RUNTIME_OUTPUT_INTDIR}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_LIT_BASE_DIR'>
<UnquotedArgument b'${LLVM_RUNTIME_OUTPUT_INTDIR}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_LIT_BASE_DIR'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b"# Cache this so we don't have to do it again and have subsequent calls">
<Comment b'# potentially disagree on the value.'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_LIT_BASE_DIR'>
<UnquotedArgument b'${LLVM_LIT_BASE_DIR}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${base_dir}'>
<UnquotedArgument b'${LLVM_LIT_BASE_DIR}'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<Comment b'# A raw function to create a lit target. This is used to implement the testuite'>
<Comment b'# management functions.'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'add_lit_target'>
<UnquotedArgument b'target'>
<UnquotedArgument b'comment'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'""'>
<QuotedArgument b'""'>
<QuotedArgument b'"PARAMS;DEPENDS;ARGS"'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LIT_ARGS'>
<QuotedArgument b'"${ARG_ARGS} ${LLVM_LIT_ARGS}"'>
<Ket b')'>
<UnquotedArgument b'separate_arguments'>
<Bra b'('>
<UnquotedArgument b'LIT_ARGS'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'CMAKE_CFG_INTDIR'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"."'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LIT_ARGS'>
<UnquotedArgument b'--param'>
<UnquotedArgument b'build_mode=${CMAKE_CFG_INTDIR}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# Get the path to the lit to *run* tests with.  This can be overriden by'>
<Comment b'# the user by specifying -DLLVM_EXTERNAL_LIT=<path-to-lit.py>'>
<UnquotedArgument b'get_llvm_lit_path'>
<Bra b'('>
<UnquotedArgument b'lit_base_dir'>
<UnquotedArgument b'lit_file_name'>
<UnquotedArgument b'ALLOW_EXTERNAL'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LIT_COMMAND'>
<QuotedArgument b'"${PYTHON_EXECUTABLE};${lit_base_dir}/${lit_file_name}"'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LIT_COMMAND'>
<UnquotedArgument b'${LIT_ARGS}'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'param'>
<UnquotedArgument b'${ARG_PARAMS}'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'LIT_COMMAND'>
<UnquotedArgument b'--param'>
<UnquotedArgument b'${param}'>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_UNPARSED_ARGUMENTS'>
<Ket b')'>
<UnquotedArgument b'add_custom_target'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'${LIT_COMMAND}'>
<UnquotedArgument b'${ARG_UNPARSED_ARGUMENTS}'>
<UnquotedArgument b'COMMENT'>
<QuotedArgument b'"${comment}"'>
<UnquotedArgument b'USES_TERMINAL'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_custom_target'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'${CMAKE_COMMAND}'>
<UnquotedArgument b'-E'>
<UnquotedArgument b'echo'>
<QuotedArgument b'"${target} does nothing, no tools built."'>
<Ket b')'>
<UnquotedArgument b'message'>
<Bra b'('>
<UnquotedArgument b'STATUS'>
<QuotedArgument b'"${target} does nothing."'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_DEPENDS'>
<Ket b')'>
<UnquotedArgument b'add_dependencies'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'${ARG_DEPENDS}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# Tests should be excluded from "Build Solution".'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'EXCLUDE_FROM_DEFAULT_BUILD'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<Comment b"# A function to add a set of lit test suites to be driven through 'check-*' targets.">
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'add_lit_testsuite'>
<UnquotedArgument b'target'>
<UnquotedArgument b'comment'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'""'>
<QuotedArgument b'""'>
<QuotedArgument b'"PARAMS;DEPENDS;ARGS"'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<Comment b'# EXCLUDE_FROM_ALL excludes the test ${target} out of check-all.'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'EXCLUDE_FROM_ALL'>
<Ket b')'>
<Comment b'# Register the testsuites, params and depends for the global check rule.'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_LIT_TESTSUITES'>
<UnquotedArgument b'${ARG_UNPARSED_ARGUMENTS}'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_LIT_PARAMS'>
<UnquotedArgument b'${ARG_PARAMS}'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_LIT_DEPENDS'>
<UnquotedArgument b'${ARG_DEPENDS}'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'GLOBAL'>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LLVM_LIT_EXTRA_ARGS'>
<UnquotedArgument b'${ARG_ARGS}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# Produce a specific suffixed check rule.'>
<UnquotedArgument b'add_lit_target'>
<Bra b'('>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'${comment}'>
<UnquotedArgument b'${ARG_UNPARSED_ARGUMENTS}'>
<UnquotedArgument b'PARAMS'>
<UnquotedArgument b'${ARG_PARAMS}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${ARG_DEPENDS}'>
<UnquotedArgument b'ARGS'>
<UnquotedArgument b'${ARG_ARGS}'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'add_lit_testsuites'>
<UnquotedArgument b'project'>
<UnquotedArgument b'directory'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'CMAKE_CONFIGURATION_TYPES'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'""'>
<QuotedArgument b'""'>
<QuotedArgument b'"PARAMS;DEPENDS;ARGS"'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<Comment b'# Search recursively for test directories by assuming anything not'>
<Comment b'# in a directory called Inputs contains tests.'>
<UnquotedArgument b'file'>
<Bra b'('>
<UnquotedArgument b'GLOB_RECURSE'>
<UnquotedArgument b'to_process'>
<UnquotedArgument b'LIST_DIRECTORIES'>
<UnquotedArgument b'true'>
<UnquotedArgument b'${directory}/*'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'lit_suite'>
<UnquotedArgument b'${to_process}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'IS_DIRECTORY'>
<UnquotedArgument b'${lit_suite}'>
<Ket b')'>
<UnquotedArgument b'continue'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'FIND'>
<UnquotedArgument b'${lit_suite}'>
<UnquotedArgument b'Inputs'>
<UnquotedArgument b'is_inputs'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'FIND'>
<UnquotedArgument b'${lit_suite}'>
<UnquotedArgument b'Output'>
<UnquotedArgument b'is_output'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<Bra b'('>
<UnquotedArgument b'is_inputs'>
<UnquotedArgument b'EQUAL'>
<UnquotedArgument b'-1'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'is_output'>
<UnquotedArgument b'EQUAL'>
<UnquotedArgument b'-1'>
<Ket b')'>
<Ket b')'>
<UnquotedArgument b'continue'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<Comment b'# Create a check- target for the directory.'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<UnquotedArgument b'${directory}'>
<QuotedArgument b'""'>
<UnquotedArgument b'name_slash'>
<UnquotedArgument b'${lit_suite}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'name_slash'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<QuotedArgument b'"/"'>
<QuotedArgument b'"-"'>
<UnquotedArgument b'name_slash'>
<UnquotedArgument b'${name_slash}'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<QuotedArgument b'"\\\\"'>
<QuotedArgument b'"-"'>
<UnquotedArgument b'name_dashes'>
<UnquotedArgument b'${name_slash}'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'TOLOWER'>
<QuotedArgument b'"${project}${name_dashes}"'>
<UnquotedArgument b'name_var'>
<Ket b')'>
<UnquotedArgument b'add_lit_target'>
<Bra b'('>
<QuotedArgument b'"check-${name_var}"'>
<QuotedArgument b'"Running lit suite ${lit_suite}"'>
<UnquotedArgument b'${lit_suite}'>
<UnquotedArgument b'PARAMS'>
<UnquotedArgument b'${ARG_PARAMS}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${ARG_DEPENDS}'>
<UnquotedArgument b'ARGS'>
<UnquotedArgument b'${ARG_ARGS}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'llvm_install_library_symlink'>
<UnquotedArgument b'name'>
<UnquotedArgument b'dest'>
<UnquotedArgument b'type'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'"ALWAYS_GENERATE"'>
<QuotedArgument b'"COMPONENT"'>
<QuotedArgument b'""'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'path'>
<UnquotedArgument b'${CMAKE_MODULE_PATH}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'EXISTS'>
<UnquotedArgument b'${path}/LLVMInstallSymlink.cmake'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'INSTALL_SYMLINK'>
<UnquotedArgument b'${path}/LLVMInstallSymlink.cmake'>
<Ket b')'>
<UnquotedArgument b'break'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'component'>
<UnquotedArgument b'${ARG_COMPONENT}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'component'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'component'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'full_name'>
<UnquotedArgument b'${CMAKE_${type}_LIBRARY_PREFIX}${name}${CMAKE_${type}_LIBRARY_SUFFIX}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'full_dest'>
<UnquotedArgument b'${CMAKE_${type}_LIBRARY_PREFIX}${dest}${CMAKE_${type}_LIBRARY_SUFFIX}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'output_dir'>
<UnquotedArgument b'lib${LLVM_LIBDIR_SUFFIX}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'WIN32'>
<UnquotedArgument b'AND'>
<QuotedArgument b'"${type}"'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"SHARED"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'output_dir'>
<UnquotedArgument b'bin'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'install'>
<Bra b'('>
<UnquotedArgument b'SCRIPT'>
<UnquotedArgument b'${INSTALL_SYMLINK}'>
<UnquotedArgument b'CODE'>
<QuotedArgument b'"install_symlink(${full_name} ${full_dest} ${output_dir})"'>
<UnquotedArgument b'COMPONENT'>
<UnquotedArgument b'${component}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'CMAKE_CONFIGURATION_TYPES'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'ARG_ALWAYS_GENERATE'>
<Ket b')'>
<UnquotedArgument b'add_llvm_install_targets'>
<Bra b'('>
<UnquotedArgument b'install-${name}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${dest}'>
<UnquotedArgument b'install-${dest}'>
<UnquotedArgument b'COMPONENT'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'llvm_install_symlink'>
<UnquotedArgument b'name'>
<UnquotedArgument b'dest'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'"ALWAYS_GENERATE"'>
<QuotedArgument b'"COMPONENT"'>
<QuotedArgument b'""'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'path'>
<UnquotedArgument b'${CMAKE_MODULE_PATH}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'EXISTS'>
<UnquotedArgument b'${path}/LLVMInstallSymlink.cmake'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'INSTALL_SYMLINK'>
<UnquotedArgument b'${path}/LLVMInstallSymlink.cmake'>
<Ket b')'>
<UnquotedArgument b'break'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_COMPONENT'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'component'>
<UnquotedArgument b'${ARG_COMPONENT}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_ALWAYS_GENERATE'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'component'>
<UnquotedArgument b'${dest}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'component'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'full_name'>
<UnquotedArgument b'${name}${CMAKE_EXECUTABLE_SUFFIX}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'full_dest'>
<UnquotedArgument b'${dest}${CMAKE_EXECUTABLE_SUFFIX}'>
<Ket b')'>
<UnquotedArgument b'install'>
<Bra b'('>
<UnquotedArgument b'SCRIPT'>
<UnquotedArgument b'${INSTALL_SYMLINK}'>
<UnquotedArgument b'CODE'>
<QuotedArgument b'"install_symlink(${full_name} ${full_dest} ${LLVM_TOOLS_INSTALL_DIR})"'>
<UnquotedArgument b'COMPONENT'>
<UnquotedArgument b'${component}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'CMAKE_CONFIGURATION_TYPES'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'ARG_ALWAYS_GENERATE'>
<Ket b')'>
<UnquotedArgument b'add_llvm_install_targets'>
<Bra b'('>
<UnquotedArgument b'install-${name}'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'${dest}'>
<UnquotedArgument b'install-${dest}'>
<UnquotedArgument b'COMPONENT'>
<UnquotedArgument b'${name}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'add_llvm_tool_symlink'>
<UnquotedArgument b'link_name'>
<UnquotedArgument b'target'>
<Ket b')'>
<UnquotedArgument b'cmake_parse_arguments'>
<Bra b'('>
<UnquotedArgument b'ARG'>
<QuotedArgument b'"ALWAYS_GENERATE"'>
<QuotedArgument b'"OUTPUT_DIR"'>
<QuotedArgument b'""'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'dest_binary'>
<QuotedArgument b'"$<TARGET_FILE:${target}>"'>
<Ket b')'>
<Comment b'# This got a bit gross... For multi-configuration generators the target'>
<Comment b'# properties return the resolved value of the string, not the build system'>
<Comment b'# expression. To reconstruct the platform-agnostic path we have to do some'>
<Comment b'# magic. First we grab one of the types, and a type-specific path. Then from'>
<Comment b'# the type-specific path we find the last occurrence of the type in the path,'>
<Comment b'# and replace it with CMAKE_CFG_INTDIR. This allows the build step to be type'>
<Comment b'# agnostic again.'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'ARG_OUTPUT_DIR'>
<Ket b')'>
<Comment b"# If you're not overriding the OUTPUT_DIR, we can make the link relative in">
<Comment b'# the same directory.'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'UNIX'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'dest_binary'>
<QuotedArgument b'"$<TARGET_FILE_NAME:${target}>"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'CMAKE_CONFIGURATION_TYPES'>
<Ket b')'>
<UnquotedArgument b'list'>
<Bra b'('>
<UnquotedArgument b'GET'>
<UnquotedArgument b'CMAKE_CONFIGURATION_TYPES'>
<UnquotedArgument b'0'>
<UnquotedArgument b'first_type'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'TOUPPER'>
<UnquotedArgument b'${first_type}'>
<UnquotedArgument b'first_type_upper'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'first_type_suffix'>
<UnquotedArgument b'_${first_type_upper}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'get_target_property'>
<Bra b'('>
<UnquotedArgument b'target_type'>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'TYPE'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${target_type}'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"STATIC_LIBRARY"'>
<Ket b')'>
<UnquotedArgument b'get_target_property'>
<Bra b'('>
<UnquotedArgument b'ARG_OUTPUT_DIR'>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'ARCHIVE_OUTPUT_DIRECTORY${first_type_suffix}'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'UNIX'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'${target_type}'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"SHARED_LIBRARY"'>
<Ket b')'>
<UnquotedArgument b'get_target_property'>
<Bra b'('>
<UnquotedArgument b'ARG_OUTPUT_DIR'>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'LIBRARY_OUTPUT_DIRECTORY${first_type_suffix}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'get_target_property'>
<Bra b'('>
<UnquotedArgument b'ARG_OUTPUT_DIR'>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'RUNTIME_OUTPUT_DIRECTORY${first_type_suffix}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'CMAKE_CONFIGURATION_TYPES'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'FIND'>
<QuotedArgument b'"${ARG_OUTPUT_DIR}"'>
<QuotedArgument b'"/${first_type}/"'>
<UnquotedArgument b'type_start'>
<UnquotedArgument b'REVERSE'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'SUBSTRING'>
<QuotedArgument b'"${ARG_OUTPUT_DIR}"'>
<UnquotedArgument b'0'>
<UnquotedArgument b'${type_start}'>
<UnquotedArgument b'path_prefix'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'SUBSTRING'>
<QuotedArgument b'"${ARG_OUTPUT_DIR}"'>
<UnquotedArgument b'${type_start}'>
<UnquotedArgument b'-1'>
<UnquotedArgument b'path_suffix'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'REPLACE'>
<QuotedArgument b'"/${first_type}/"'>
<QuotedArgument b'"/${CMAKE_CFG_INTDIR}/"'>
<UnquotedArgument b'path_suffix'>
<UnquotedArgument b'${path_suffix}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'ARG_OUTPUT_DIR'>
<UnquotedArgument b'${path_prefix}${path_suffix}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'UNIX'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_LINK_OR_COPY'>
<UnquotedArgument b'create_symlink'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'LLVM_LINK_OR_COPY'>
<UnquotedArgument b'copy'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'output_path'>
<QuotedArgument b'"${ARG_OUTPUT_DIR}/${link_name}${CMAKE_EXECUTABLE_SUFFIX}"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'target_name'>
<UnquotedArgument b'${link_name}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${link_name}'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'target_name'>
<UnquotedArgument b'${link_name}-link'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'ARG_ALWAYS_GENERATE'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'DIRECTORY'>
<UnquotedArgument b'APPEND'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'ADDITIONAL_MAKE_CLEAN_FILES'>
<UnquotedArgument b'${dest_binary}'>
<Ket b')'>
<UnquotedArgument b'add_custom_command'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'POST_BUILD'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'${CMAKE_COMMAND}'>
<UnquotedArgument b'-E'>
<UnquotedArgument b'${LLVM_LINK_OR_COPY}'>
<QuotedArgument b'"${dest_binary}"'>
<QuotedArgument b'"${output_path}"'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_custom_command'>
<Bra b'('>
<UnquotedArgument b'OUTPUT'>
<UnquotedArgument b'${output_path}'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'${CMAKE_COMMAND}'>
<UnquotedArgument b'-E'>
<UnquotedArgument b'${LLVM_LINK_OR_COPY}'>
<QuotedArgument b'"${dest_binary}"'>
<QuotedArgument b'"${output_path}"'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${target}'>
<Ket b')'>
<UnquotedArgument b'add_custom_target'>
<Bra b'('>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'ALL'>
<UnquotedArgument b'DEPENDS'>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'${output_path}'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${target_name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'FOLDER'>
<UnquotedArgument b'Tools'>
<Ket b')'>
<Comment b'# Make sure both the link and target are toolchain tools'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${link_name}'>
<UnquotedArgument b'IN_LIST'>
<UnquotedArgument b'LLVM_TOOLCHAIN_TOOLS'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'${target}'>
<UnquotedArgument b'IN_LIST'>
<UnquotedArgument b'LLVM_TOOLCHAIN_TOOLS'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'TOOL_IS_TOOLCHAIN'>
<UnquotedArgument b'ON'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<Bra b'('>
<UnquotedArgument b'TOOL_IS_TOOLCHAIN'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_INSTALL_TOOLCHAIN_ONLY'>
<Ket b')'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'LLVM_BUILD_TOOLS'>
<Ket b')'>
<UnquotedArgument b'llvm_install_symlink'>
<Bra b'('>
<UnquotedArgument b'${link_name}'>
<UnquotedArgument b'${target}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'llvm_externalize_debuginfo'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_EXTERNALIZE_DEBUGINFO'>
<Ket b')'>
<UnquotedArgument b'return'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_EXTERNALIZE_DEBUGINFO_SKIP_STRIP'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'APPLE'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'strip_command'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'xcrun'>
<UnquotedArgument b'strip'>
<UnquotedArgument b'-Sxl'>
<UnquotedArgument b'$<TARGET_FILE:${name}>'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'strip_command'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'strip'>
<UnquotedArgument b'-gx'>
<UnquotedArgument b'$<TARGET_FILE:${name}>'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'APPLE'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'CMAKE_CXX_FLAGS'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"-flto"'>
<UnquotedArgument b'OR'>
<UnquotedArgument b'CMAKE_CXX_FLAGS_${uppercase_CMAKE_BUILD_TYPE}'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"-flto"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'lto_object'>
<UnquotedArgument b'${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/${name}-lto.o'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'" -Wl,-object_path_lto,${lto_object}"'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_custom_command'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'POST_BUILD'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'xcrun'>
<UnquotedArgument b'dsymutil'>
<UnquotedArgument b'$<TARGET_FILE:${name}>'>
<UnquotedArgument b'${strip_command}'>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'add_custom_command'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'POST_BUILD'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'objcopy'>
<UnquotedArgument b'--only-keep-debug'>
<UnquotedArgument b'$<TARGET_FILE:${name}>'>
<UnquotedArgument b'$<TARGET_FILE:${name}>.debug'>
<UnquotedArgument b'${strip_command}'>
<UnquotedArgument b'-R'>
<UnquotedArgument b'.gnu_debuglink'>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'objcopy'>
<UnquotedArgument b'--add-gnu-debuglink=$<TARGET_FILE:${name}>.debug'>
<UnquotedArgument b'$<TARGET_FILE:${name}>'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'llvm_setup_rpath'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'CMAKE_INSTALL_RPATH'>
<Ket b')'>
<UnquotedArgument b'return'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'LLVM_INSTALL_PREFIX'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<Bra b'('>
<UnquotedArgument b'LLVM_INSTALL_PREFIX'>
<UnquotedArgument b'STREQUAL'>
<UnquotedArgument b'CMAKE_INSTALL_PREFIX'>
<Ket b')'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'extra_libdir'>
<UnquotedArgument b'${LLVM_LIBRARY_DIR}'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'LLVM_BUILD_LIBRARY_DIR'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'extra_libdir'>
<UnquotedArgument b'${LLVM_LIBRARY_DIR}'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'APPLE'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'_install_name_dir'>
<UnquotedArgument b'INSTALL_NAME_DIR'>
<QuotedArgument b'"@rpath"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'_install_rpath'>
<QuotedArgument b'"@loader_path/../lib"'>
<UnquotedArgument b'${extra_libdir}'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'UNIX'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'_install_rpath'>
<QuotedArgument b'"\\$ORIGIN/../lib${LLVM_LIBDIR_SUFFIX}"'>
<UnquotedArgument b'${extra_libdir}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'${CMAKE_SYSTEM_NAME}'>
<UnquotedArgument b'MATCHES'>
<QuotedArgument b'"(FreeBSD|DragonFly)"'>
<Ket b')'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'" -Wl,-z,origin "'>
<Ket b')'>
<UnquotedArgument b'elseif'>
<Bra b'('>
<UnquotedArgument b'${CMAKE_SYSTEM_NAME}'>
<UnquotedArgument b'STREQUAL'>
<QuotedArgument b'"Linux"'>
<UnquotedArgument b'AND'>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_LINKER_IS_GOLD'>
<Ket b')'>
<Comment b'# $ORIGIN is not interpreted at link time by ld.bfd'>
<UnquotedArgument b'set_property'>
<Bra b'('>
<UnquotedArgument b'TARGET'>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'APPEND_STRING'>
<UnquotedArgument b'PROPERTY'>
<UnquotedArgument b'LINK_FLAGS'>
<QuotedArgument b'" -Wl,-rpath-link,${LLVM_LIBRARY_OUTPUT_INTDIR} "'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'return'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'BUILD_WITH_INSTALL_RPATH'>
<UnquotedArgument b'On'>
<UnquotedArgument b'INSTALL_RPATH'>
<QuotedArgument b'"${_install_rpath}"'>
<UnquotedArgument b'${_install_name_dir}'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'setup_dependency_debugging'>
<UnquotedArgument b'name'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'LLVM_DEPENDENCY_DEBUGGING'>
<Ket b')'>
<UnquotedArgument b'return'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<QuotedArgument b'"intrinsics_gen"'>
<UnquotedArgument b'IN_LIST'>
<UnquotedArgument b'ARGN'>
<Ket b')'>
<UnquotedArgument b'return'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'deny_attributes_gen'>
<QuotedArgument b'"(deny file* (literal \\"${LLVM_BINARY_DIR}/include/llvm/IR/Attributes.gen\\"))"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'deny_intrinsics_gen'>
<QuotedArgument b'"(deny file* (literal \\"${LLVM_BINARY_DIR}/include/llvm/IR/Intrinsics.gen\\"))"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'sandbox_command'>
<QuotedArgument b'"sandbox-exec -p \'(version 1) (allow default) ${deny_attributes_gen} ${deny_intrinsics_gen}\'"'>
<Ket b')'>
<UnquotedArgument b'set_target_properties'>
<Bra b'('>
<UnquotedArgument b'${name}'>
<UnquotedArgument b'PROPERTIES'>
<UnquotedArgument b'RULE_LAUNCH_COMPILE'>
<UnquotedArgument b'${sandbox_command}'>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<Comment b'# Figure out if we can track VC revisions.'>
<UnquotedArgument b'function'>
<Bra b'('>
<UnquotedArgument b'find_first_existing_file'>
<UnquotedArgument b'out_var'>
<Ket b')'>
<UnquotedArgument b'foreach'>
<Bra b'('>
<UnquotedArgument b'file'>
<UnquotedArgument b'${ARGN}'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'EXISTS'>
<QuotedArgument b'"${file}"'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${out_var}'>
<QuotedArgument b'"${file}"'>
<UnquotedArgument b'PARENT_SCOPE'>
<Ket b')'>
<UnquotedArgument b'return'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endforeach'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endfunction'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'macro'>
<Bra b'('>
<UnquotedArgument b'find_first_existing_vc_file'>
<UnquotedArgument b'out_var'>
<UnquotedArgument b'path'>
<Ket b')'>
<UnquotedArgument b'find_program'>
<Bra b'('>
<UnquotedArgument b'git_executable'>
<UnquotedArgument b'NAMES'>
<UnquotedArgument b'git'>
<UnquotedArgument b'git.exe'>
<UnquotedArgument b'git.cmd'>
<Ket b')'>
<Comment b'# Run from a subdirectory to force git to print an absolute path.'>
<UnquotedArgument b'execute_process'>
<Bra b'('>
<UnquotedArgument b'COMMAND'>
<UnquotedArgument b'${git_executable}'>
<UnquotedArgument b'rev-parse'>
<UnquotedArgument b'--git-dir'>
<UnquotedArgument b'WORKING_DIRECTORY'>
<UnquotedArgument b'${path}/cmake'>
<UnquotedArgument b'RESULT_VARIABLE'>
<UnquotedArgument b'git_result'>
<UnquotedArgument b'OUTPUT_VARIABLE'>
<UnquotedArgument b'git_dir'>
<UnquotedArgument b'ERROR_QUIET'>
<Ket b')'>
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'git_result'>
<UnquotedArgument b'EQUAL'>
<UnquotedArgument b'0'>
<Ket b')'>
<UnquotedArgument b'string'>
<Bra b'('>
<UnquotedArgument b'STRIP'>
<QuotedArgument b'"${git_dir}"'>
<UnquotedArgument b'git_dir'>
<Ket b')'>
<UnquotedArgument b'set'>
<Bra b'('>
<UnquotedArgument b'${out_var}'>
<QuotedArgument b'"${git_dir}/logs/HEAD"'>
<Ket b')'>
<Comment b"# some branchless cases (e.g. 'repo') may not yet have .git/logs/HEAD">
<UnquotedArgument b'if'>
<Bra b'('>
<UnquotedArgument b'NOT'>
<UnquotedArgument b'EXISTS'>
<QuotedArgument b'"${git_dir}/logs/HEAD"'>
<Ket b')'>
<UnquotedArgument b'file'>
<Bra b'('>
<UnquotedArgument b'WRITE'>
<QuotedArgument b'"${git_dir}/logs/HEAD"'>
<QuotedArgument b'""'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'else'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'find_first_existing_file'>
<Bra b'('>
<UnquotedArgument b'${out_var}'>
<QuotedArgument b'"${path}/.svn/wc.db"'>
<Comment b'# SVN 1.7'>
<QuotedArgument b'"${path}/.svn/entries"'>
<Comment b'# SVN 1.6'>
<Ket b')'>
<UnquotedArgument b'endif'>
<Bra b'('>
<Ket b')'>
<UnquotedArgument b'endmacro'>
<Bra b'('>
<Ket b')'>
